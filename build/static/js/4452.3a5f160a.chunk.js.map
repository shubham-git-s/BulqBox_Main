{"version":3,"file":"static/js/4452.3a5f160a.chunk.js","mappings":"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","sources":["components/Loader.tsx","components/form/VerticalForm.tsx","components/form/FormInput.tsx","pages/apps/Chat/data.ts","pages/apps/Chat/ChatUsers.tsx","pages/apps/Chat/ChatArea.tsx","pages/apps/Chat/index.tsx","../node_modules/react-bootstrap/esm/CardBody.js","../node_modules/react-bootstrap/esm/CardFooter.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardImgOverlay.js","../node_modules/react-bootstrap/esm/CardLink.js","../node_modules/react-bootstrap/esm/CardSubtitle.js","../node_modules/react-bootstrap/esm/CardText.js","../node_modules/react-bootstrap/esm/CardTitle.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js"],"sourcesContent":["const Loader = () => {\n    return (\n        <div className=\"preloader\" id=\"preloader\">\n            <div className=\"status\" id=\"status\">\n                <div className=\"spinner\">\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Loader;\n","import React from 'react';\nimport { useForm, Resolver, SubmitHandler, UnpackNestedValue, DeepPartial, FieldValues, DefaultValues } from 'react-hook-form';\n\ntype VerticalFromProps<TFormValues extends FieldValues> = {\n    defaultValues?: UnpackNestedValue<DeepPartial<TFormValues>>;\n    resolver?: Resolver<TFormValues>;\n    children?: React.ReactNode;\n    onSubmit: SubmitHandler<TFormValues>;\n    formClass?: string;\n};\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({\n        defaultValues: defaultValues as DefaultValues<TFormValues>,\n        resolver,\n    });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","import { useState, InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport { FieldErrors, Control } from 'react-hook-form';\n\ntype FormInputProps = InputHTMLAttributes<HTMLInputElement> & {\n    endIcon?: boolean;\n    label?: string;\n    type?: string;\n    name: string;\n    comp?: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    textClassName?: string;\n    refCallback?: any;\n    action?: React.ReactNode;\n    rows?: number;\n};\n\n/* Password Input with addons */\nconst PasswordInput = ({\n    name,\n    placeholder,\n    refCallback,\n    errors,\n    control,\n    register,\n    className,\n    ...otherProps\n}: FormInputProps) => {\n    const [showPassword, setShowPassword] = useState<boolean>(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                    {...otherProps}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}\n                >\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}\n                    ></span>\n                </div>\n            </InputGroup>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                   {errors[name]?.['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            {type === 'password' && endIcon ? (\n                <>\n                    <PasswordInput\n                        name={name}\n                        placeholder={placeholder}\n                        refCallback={refCallback}\n                        errors={errors!}\n                        register={register}\n                        className={className}\n                        {...otherProps}\n                    />\n                </>\n            ) : (\n                <>\n                    <Form.Control\n                        type={type}\n                        placeholder={placeholder}\n                        name={name}\n                        as={comp}\n                        id={name}\n                        ref={(r: HTMLInputElement) => {\n                            if (refCallback) refCallback(r);\n                        }}\n                        className={className}\n                        isInvalid={errors && errors[name] ? true : false}\n                        {...(register ? register(name) : {})}\n                        rows={rows}\n                        {...otherProps}\n                    ></Form.Control>\n\n                    {errors && errors[name] ? (\n                        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                           {errors[name]?.['message']}\n                        </Form.Control.Feedback>\n                    ) : null}\n                </>\n            )}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]?.['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    className,\n    children,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                children={children}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]?.['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    const hasEndIcon = endIcon !== undefined ? endIcon : true;\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n\n                            <SelectInput\n                                type={type}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                children={children}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : (\n                        <>\n                            {type === 'checkbox' || type === 'radio' ? (\n                                <Form.Group className={containerClass}>\n                                    <CheckInput\n                                        type={type}\n                                        label={label}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            ) : (\n                                <Form.Group className={containerClass}>\n                                    {label ? (\n                                        <>\n                                            <Form.Label className={labelClassName}>{label}</Form.Label>\n                                            {action && action}\n                                        </>\n                                    ) : null}\n\n                                    <TextualInput\n                                        type={type}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        endIcon={hasEndIcon}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","// types\nimport { ChatMessage, ChatUser } from './types';\n\n// images\nimport avatar1 from '../../../assets/images/users/user-1.jpg';\nimport avatar2 from '../../../assets/images/users/user-2.jpg';\nimport avatar3 from '../../../assets/images/users/user-3.jpg';\nimport avatar4 from '../../../assets/images/users/user-4.jpg';\nimport avatar5 from '../../../assets/images/users/user-5.jpg';\nimport avatar6 from '../../../assets/images/users/user-6.jpg';\nimport avatar7 from '../../../assets/images/users/user-7.jpg';\n\nconst users: ChatUser[] = [\n    {\n        id: 1,\n        name: 'Margaret Clayton',\n        avatar: avatar2,\n        lastMessage: 'I have finished it! See you so...',\n        lastMessageOn: '05 min',\n        userStatus: 'online',\n    },\n    {\n        id: 2,\n        name: 'Jason Bent',\n        icon: 'mdi mdi-account',\n        variant: 'success',\n        lastMessage: 'Hey! there I am available',\n        lastMessageOn: '20 min',\n        userStatus: 'online',\n    },\n    {\n        id: 3,\n        name: 'Mark Nieto',\n        avatar: avatar3,\n        lastMessage: 'This theme is awesome!',\n        lastMessageOn: '32 min',\n        lastMessageSeen: false,\n        userStatus: 'offline',\n    },\n    {\n        id: 4,\n        name: 'Garret Sauer',\n        avatar: avatar4,\n        lastMessage: 'Nice to meet you',\n        lastMessageOn: '01 hr',\n        lastMessageSeen: false,\n        userStatus: 'online',\n    },\n    {\n        id: 5,\n        name: 'Michael James',\n        avatar: avatar5,\n        lastMessage: 'Good morning',\n        lastMessageOn: '01 hr',\n        userStatus: 'offline',\n    },\n    {\n        id: 6,\n        name: 'Felicia Johnson',\n        icon: 'mdi mdi-account',\n        variant: 'primary',\n        lastMessage: 'Meeting 10am',\n        lastMessageOn: '02 hr',\n        lastMessageSeen: false,\n        userStatus: 'offline',\n    },\n    {\n        id: 7,\n        name: 'Tracy Marsh',\n        avatar: avatar6,\n        lastMessage: 'Hey! there I am available',\n        lastMessageOn: '04 hr',\n        userStatus: 'online',\n    },\n    {\n        id: 8,\n        name: 'Richard Lopez',\n        avatar: avatar7,\n        lastMessage: 'Nice to meet you',\n        lastMessageOn: '05 hr',\n        userStatus: 'offline',\n    },\n];\n\nconst messages: ChatMessage[] = [];\n\nconst defaultTo = {\n    id: 9,\n    name: 'Geneva M',\n    avatar: avatar1,\n};\n\nfor (const user of users) {\n    messages.push(\n        {\n            id: 1,\n            message: 'Hello!',\n            to: defaultTo,\n            from: user,\n            sendOn: '10:00',\n        },\n        {\n            id: 2,\n            message: 'Hi, How are you? What about our next meeting?',\n            to: user,\n            from: defaultTo,\n            sendOn: '10:01',\n        },\n        {\n            id: 3,\n            message: 'Yeah everything is fine',\n            to: defaultTo,\n            from: user,\n            sendOn: '10:03',\n        },\n        {\n            id: 4,\n            message: '& Next meeting tomorrow 10.00AM',\n            to: defaultTo,\n            from: user,\n            sendOn: '10:03',\n        },\n        {\n            id: 5,\n            message: 'Wow thats great',\n            to: user,\n            from: defaultTo,\n            sendOn: '10:04',\n        }\n    );\n}\n\nexport { users, messages };\n","import { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Dropdown } from 'react-bootstrap';\nimport classnames from 'classnames';\nimport SimpleBar from 'simplebar-react';\n\n// types\nimport { ChatUser } from './types';\n\n// dummy data\nimport { users } from './data';\n\n// images\nimport profilePic from '../../../assets/images/users/user-1.jpg';\nimport classNames from 'classnames';\n\ntype ChatUsersProps = {\n    onUserSelect: (value: ChatUser) => void;\n};\n\n// ChatUsers\nconst ChatUsers = ({ onUserSelect }: ChatUsersProps) => {\n    const [user, setUser] = useState<ChatUser[]>([...users]);\n    const [selectedUser, setSelectedUser] = useState<ChatUser>(users[1]);\n\n    // Search the user\n    // @param {*} text\n    const search = (text: string) => {\n        setUser(text ? [...users].filter((u) => u.name!.toLowerCase().indexOf(text.toLowerCase()) >= 0) : [...users]);\n    };\n\n    // Activates the user\n    // @param {*} user\n    const activateUser = (user: ChatUser) => {\n        setSelectedUser(user);\n        if (onUserSelect) {\n            onUserSelect(user);\n        }\n    };\n\n    return (\n        <>\n            <Card className=\"chat-list-card mb-xl-0\">\n                <Card.Body>\n                    <Dropdown className=\"float-end\" align=\"end\">\n                        <Dropdown.Toggle as=\"a\" className=\"cursor-pointer card-drop\">\n                            <i className=\"mdi mdi-dots-vertical\"></i>\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            <Dropdown.Item>Action</Dropdown.Item>\n                            <Dropdown.Item>Anothther Action</Dropdown.Item>\n                            <Dropdown.Item>Something Else</Dropdown.Item>\n                            <Dropdown.Item>Separated link</Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n\n                    <div className=\"d-flex\">\n                        <div className=\"flex-shrink-0\">\n                            <img src={profilePic} className=\"rounded-circle avatar-sm\" alt=\"\" />\n                        </div>\n                        <div className=\"flex-grow-1 align-items-center ms-2\">\n                            <h5 className=\"mt-0 mb-1\">\n                                <Link to=\"/\" className=\"text-reset\">\n                                    Nowak Helme\n                                </Link>\n                            </h5>\n                            <p className=\"font-13 text-muted mb-0\">Admin Head</p>\n                        </div>\n                    </div>\n\n                    <hr className=\"my-3\" />\n\n                    <form className=\"search-box chat-search-box\">\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            placeholder=\"Search...\"\n                            onKeyUp={(e: any) => search(e.target.value)}\n                        />\n                        <span className=\"mdi mdi-magnify search-icon\"></span>\n                    </form>\n\n                    <hr className=\"my-3\" />\n\n                    <ul className=\"list-unstyled chat-list mb-0\">\n                        <SimpleBar style={{ height: '410px', width: '100%' }}>\n                            {(user || []).map((user, index) => {\n                                return (\n                                    <li\n                                        key={index.toString()}\n                                        className={classnames({\n                                            active: user.id === selectedUser.id,\n                                            unread: user.lastMessageSeen === false,\n                                        })}\n                                    >\n                                        <Link\n                                            to=\"#\"\n                                            onClick={(e: any) => {\n                                                activateUser(user);\n                                            }}\n                                        >\n                                            <div className=\"d-flex\">\n                                                {user.avatar ? (\n                                                    <div\n                                                        className={classNames(\n                                                            'flex-shrink-0',\n                                                            'chat-user-img',\n                                                            'align-self-center',\n                                                            'me-2',\n                                                            user.userStatus === 'online' && 'active'\n                                                        )}\n                                                    >\n                                                        <img\n                                                            src={user.avatar}\n                                                            className=\"rounded-circle avatar-sm\"\n                                                            alt=\"\"\n                                                        />\n                                                    </div>\n                                                ) : (\n                                                    <div\n                                                        className={classNames(\n                                                            'flex-shrink-0',\n                                                            'chat-user-img',\n                                                            'avatar-sm',\n                                                            'align-self-center',\n                                                            'me-2',\n                                                            user.userStatus === 'online' && 'active'\n                                                        )}\n                                                    >\n                                                        <span\n                                                            className={classnames(\n                                                                'avatar-title',\n                                                                'rounded-circle',\n                                                                'bg-soft-' + user.variant,\n                                                                'text-' + user.variant\n                                                            )}\n                                                        >\n                                                            <i className={classNames(user.icon)}></i>\n                                                        </span>\n                                                    </div>\n                                                )}\n                                                <div className=\"flex-grow-1 overflow-hidden\">\n                                                    <h5 className=\"text-truncate font-14 mt-0 mb-1\">{user.name}</h5>\n                                                    <p className=\"text-truncate mb-0\">{user.lastMessage}</p>\n                                                </div>\n                                                <div className=\"font-11\">{user.lastMessageOn}</div>\n                                            </div>\n                                        </Link>\n                                    </li>\n                                );\n                            })}\n                        </SimpleBar>\n                    </ul>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nexport default ChatUsers;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Card, Dropdown, Row, Col } from 'react-bootstrap';\nimport classnames from 'classnames';\nimport SimpleBar from 'simplebar-react';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n// components\nimport { FormInput } from '../../../components/form';\nimport Loader from '../../../components/Loader';\n\n// types\nimport { ChatMessage, ChatUser } from './types';\n\n// dummy data\nimport { messages } from './data';\n\n// images\nimport avatar1 from '../../../assets/images/users/user-1.jpg';\n\nconst UserMessage = ({ message, toUser }: { message: ChatMessage; toUser: ChatUser }) => {\n    return (\n        <li className={classnames('clearfix', { odd: message.from.id === toUser.id })}>\n            <div className=\"message-list\">\n                {message.from.avatar ? (\n                    <div className=\"chat-avatar\">\n                        <img src={message.from.avatar} alt=\"\" />\n                    </div>\n                ) : (\n                    <div className=\"chat-avatar\">\n                        <span\n                            className={classnames(\n                                'd-flex',\n                                'align-items-center',\n                                'justify-content-center',\n                                'avatar-sm',\n                                'rounded-circle',\n                                'bg-soft-' + message.from.variant,\n                                'text-' + message.from.variant\n                            )}\n                        >\n                            <i className={classnames(message.from.icon)}></i>\n                        </span>\n                    </div>\n                )}\n\n                <div className=\"conversation-text\">\n                    <div className=\"ctext-wrap\">\n                        <i>{message.from.name}</i>\n                        <p>{message.message}</p>\n                    </div>\n                    <span className=\"time\">{message.sendOn}</span>\n                </div>\n            </div>\n        </li>\n    );\n};\n\ntype ChatAreaProps = {\n    selectedUser: ChatUser;\n};\n\n// ChatArea\nconst ChatArea = ({ selectedUser }: ChatAreaProps) => {\n    const [loading, setLoading] = useState<boolean>(false);\n\n    const [userMessages, setUserMessages] = useState<ChatMessage[]>([]);\n    const [toUser] = useState<ChatUser>({\n        id: 9,\n        name: 'Geneva M',\n        avatar: avatar1,\n    });\n\n    // Fetches the messages for selected user\n    const getMessagesForUser = useCallback(() => {\n        if (selectedUser) {\n            setLoading(true);\n            setTimeout(() => {\n                setUserMessages(\n                    [...messages].filter(\n                        (m) =>\n                            (m.to.id === toUser.id && m.from.id === selectedUser.id) ||\n                            (toUser.id === m.from.id && m.to.id === selectedUser.id)\n                    )\n                );\n                setLoading(false);\n            }, 750);\n        }\n    }, [selectedUser, toUser]);\n\n    useEffect(() => {\n        getMessagesForUser();\n    }, [getMessagesForUser]);\n\n    // form validation schema\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            newMessage: yup.string().required('Please enter your messsage'),\n        })\n    );\n\n    // form methods\n    const methods = useForm({ resolver: schemaResolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n        reset,\n    } = methods;\n\n    // sends the chat message\n    const sendChatMessage = (data: { [x: string]: string }) => {\n        let newUserMessages = [...userMessages];\n        newUserMessages.push({\n            id: userMessages.length + 1,\n            from: toUser,\n            to: selectedUser,\n            message: data['newMessage'],\n            sendOn: new Date().getHours() + ':' + new Date().getMinutes(),\n        });\n        setUserMessages(newUserMessages);\n        reset();\n    };\n\n    return (\n        <Card className=\"conversation-list-card\">\n            <Card.Body>\n                <Dropdown className=\"float-end\" align=\"end\">\n                    <Dropdown.Toggle as=\"a\" className=\"cursor-pointer card-drop\">\n                        <i className=\"mdi mdi-dots-vertical\"></i>\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Action</Dropdown.Item>\n                        <Dropdown.Item>Anothther Action</Dropdown.Item>\n                        <Dropdown.Item>Something Else</Dropdown.Item>\n                        <Dropdown.Divider />\n                        <Dropdown.Item>Separated link</Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n\n                <div className=\"d-flex\">\n                    <div className=\"flex-grow-1\">\n                        <h5 className=\"mt-0 mb-1 text-truncate\">{selectedUser.name}</h5>\n                        <p className=\"font-13 text-muted mb-0\">\n                            <i className=\"mdi mdi-circle text-success me-1 font-11\"></i>\n                            Active\n                        </p>\n                    </div>\n                </div>\n\n                <hr className=\"my-3\" />\n\n                {loading && <Loader />}\n                <SimpleBar style={{ height: '410px', width: '100%' }}>\n                    <ul className=\"conversation-list\">\n                        <li>\n                            <div className=\"chat-day-title\">\n                                <span className=\"title\">Today</span>\n                            </div>\n                        </li>\n                        {(userMessages || []).map((message, index) => {\n                            return <UserMessage key={index.toString()} message={message} toUser={toUser} />;\n                        })}\n                    </ul>\n                </SimpleBar>\n            </Card.Body>\n            <div className=\"p-3 conversation-input border-top\">\n                <form name=\"chat-form\" id=\"chat-form\" onSubmit={handleSubmit(sendChatMessage)}>\n                    <Row>\n                        <Col>\n                            <FormInput\n                                type=\"text\"\n                                name=\"newMessage\"\n                                placeholder=\"Enter Message...\"\n                                register={register}\n                                key=\"newMessage\"\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                        <Col xs=\"auto\">\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-primary chat-send width-md waves-effect waves-light\"\n                            >\n                                <span className=\"d-none d-sm-inline-block me-2\">Send</span>\n                                <i className=\"mdi mdi-send\"></i>\n                            </button>\n                        </Col>\n                    </Row>\n                </form>\n            </div>\n        </Card>\n    );\n};\n\nexport default ChatArea;\n","import { useState } from 'react';\nimport { Col, Row } from 'react-bootstrap';\n\n// hooks\nimport { usePageTitle } from '../../../hooks';\n\n// component\nimport ChatUsers from './ChatUsers';\nimport ChatArea from './ChatArea';\n\n// types\nimport { ChatUser } from './types';\n\n// dummy data\nimport { users } from './data';\n\nconst ChatApp = () => {\n    // set pagetitle\n    usePageTitle({\n        title: 'Chat',\n        breadCrumbItems: [\n            {\n                path: '/apps/chat',\n                label: 'Apps',\n            },\n            {\n                path: '/apps/chat',\n                label: 'Chat',\n                active: true,\n            },\n        ],\n    });\n\n    const [selectedUser, setSelectedUser] = useState<ChatUser>(users[1]);\n\n    // On user change\n    const onUserChange = (user: ChatUser) => {\n        setSelectedUser(user);\n    };\n\n    return (\n        <Row>\n            <Col xl={3} lg={4}>\n                <ChatUsers onUserSelect={onUserChange} />\n            </Col>\n            <Col xl={9} lg={8}>\n                <ChatArea selectedUser={selectedUser} />\n            </Col>\n        </Row>\n    );\n};\n\nexport default ChatApp;\n","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardBody = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-body');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardBody.displayName = 'CardBody';\nexport default CardBody;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardFooter = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-footer');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardFooter.displayName = 'CardFooter';\nexport default CardFooter;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef(\n// Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImgOverlay = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-img-overlay');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardImgOverlay.displayName = 'CardImgOverlay';\nexport default CardImgOverlay;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardLink = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'a',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-link');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardLink.displayName = 'CardLink';\nexport default CardLink;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport divWithClassName from './divWithClassName';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardSubtitle = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = DivStyledAsH6,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-subtitle');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardSubtitle.displayName = 'CardSubtitle';\nexport default CardSubtitle;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardText = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'p',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-text');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardText.displayName = 'CardText';\nexport default CardText;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport divWithClassName from './divWithClassName';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst CardTitle = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = DivStyledAsH5,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-title');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardTitle.displayName = 'CardTitle';\nexport default CardTitle;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardBody from './CardBody';\nimport CardFooter from './CardFooter';\nimport CardHeader from './CardHeader';\nimport CardImg from './CardImg';\nimport CardImgOverlay from './CardImgOverlay';\nimport CardLink from './CardLink';\nimport CardSubtitle from './CardSubtitle';\nimport CardText from './CardText';\nimport CardTitle from './CardTitle';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body = false,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","\"use client\";\n\nimport * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;"],"names":["Loader","_jsx","className","id","children","_jsxs","_ref","defaultValues","resolver","onSubmit","formClass","methods","useForm","handleSubmit","register","control","formState","errors","noValidate","Array","isArray","map","child","props","name","React","type","key","PasswordInput","_errors$name","placeholder","refCallback","otherProps","showPassword","setShowPassword","useState","_Fragment","InputGroup","Form","Control","as","ref","r","isInvalid","autoComplete","classNames","onClick","Feedback","TextualInput","_ref2","_errors$name2","endIcon","comp","rows","CheckInput","_ref3","_errors$name3","label","Check","SelectInput","_ref4","_errors$name4","Select","_ref5","labelClassName","containerClass","action","hasEndIcon","undefined","Group","Label","users","avatar","lastMessage","lastMessageOn","userStatus","icon","variant","lastMessageSeen","messages","defaultTo","avatar1","user","push","message","to","from","sendOn","onUserSelect","setUser","selectedUser","setSelectedUser","Card","Body","Dropdown","align","Toggle","Menu","Item","src","profilePic","alt","Link","onKeyUp","e","search","text","target","value","filter","u","toLowerCase","indexOf","SimpleBar","style","height","width","index","classnames","active","unread","activateUser","toString","UserMessage","toUser","odd","loading","setLoading","userMessages","setUserMessages","getMessagesForUser","useCallback","setTimeout","m","useEffect","schemaResolver","yupResolver","yup","shape","newMessage","required","reset","Divider","data","newUserMessages","length","Date","getHours","getMinutes","Row","Col","FormInput","xs","ChatApp","usePageTitle","title","breadCrumbItems","path","xl","lg","ChatUsers","ChatArea","CardBody","bsPrefix","Component","useBootstrapPrefix","displayName","CardFooter","CardHeader","prefix","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","Provider","CardImg","CardImgOverlay","CardLink","DivStyledAsH6","divWithClassName","CardSubtitle","CardText","DivStyledAsH5","CardTitle","bg","border","body","Object","assign","Img","Title","Subtitle","Text","Header","Footer","ImgOverlay","context"],"sourceRoot":""}