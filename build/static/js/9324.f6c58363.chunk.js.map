{"version":3,"file":"static/js/9324.f6c58363.chunk.js","mappings":"wOAMA,MAmDA,EAnDuBA,KACnB,MAOMC,GACFC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,GAAG,oBAAmBC,UAC3BH,EAAAA,EAAAA,KAACC,EAAAA,EAAQG,KAAI,CAAAD,SAAC,kEAItB,OACIH,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAAAF,UACDG,EAAAA,EAAAA,MAACD,EAAAA,EAAKD,KAAI,CAAAD,SAAA,EACNH,EAAAA,EAAAA,KAAA,MAAIO,UAAU,eAAcJ,SAAC,cAC7BH,EAAAA,EAAAA,KAAA,KAAGO,UAAU,aAAYJ,SAAC,8GAI1BG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaJ,SAAA,EArBR,CAC5B,CAAEK,UAAW,OACb,CAAEA,UAAW,UACb,CAAEA,UAAW,SACb,CAAEA,UAAW,UAkBe,IAAIC,KAAKC,IACrBV,EAAAA,EAAAA,KAACW,EAAAA,EAAc,CACXC,QAAQ,QAERJ,UAAWE,EAAKF,UAChBK,SACIb,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAAEC,GAAI,sBAAsBQ,EAAKF,YAAYL,UACjDH,EAAAA,EAAAA,KAACC,EAAAA,EAAQG,KAAI,CAAAD,SAAC,gEAIrBA,UAEDG,EAAAA,EAAAA,MAACQ,EAAAA,EAAM,CAACC,QAAQ,QAAQR,UAAU,OAAMJ,SAAA,CAAC,cACzBO,EAAKF,cAXhBE,EAAKF,cAgBlBR,EAAAA,EAAAA,KAACW,EAAAA,EAAc,CAACC,QAAQ,QAAQJ,UAAU,QAAQK,QAASd,EAAQI,UAC/DH,EAAAA,EAAAA,KAACc,EAAAA,EAAM,CAAAX,SAAC,iCAIjB,E,eC/Cf,MAoCA,EApCwBa,KAShBhB,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAAAF,UACDG,EAAAA,EAAAA,MAACD,EAAAA,EAAKD,KAAI,CAAAD,SAAA,EACNH,EAAAA,EAAAA,KAAA,MAAIO,UAAU,eAAcJ,SAAC,cAC7BH,EAAAA,EAAAA,KAAA,KAAGO,UAAU,qBAAoBJ,SAAC,uEAElCH,EAAAA,EAAAA,KAAA,OAAKO,UAAU,cAAaJ,UAbR,CAC5B,CAAEK,UAAW,OACb,CAAEA,UAAW,UACb,CAAEA,UAAW,SACb,CAAEA,UAAW,UAUe,IAAIC,KAAKC,IACrBV,EAAAA,EAAAA,KAACW,EAAAA,EAAc,CAEXH,UAAWE,EAAKF,UAChBK,SACIP,EAAAA,EAAAA,MAACW,EAAAA,EAAO,CAACf,GAAI,WAAWQ,EAAKF,YAAYL,SAAA,CAAC,eAC3BH,EAAAA,EAAAA,KAAA,UAAAG,SAASO,EAAKF,YAAmB,OAEnDL,UAEDG,EAAAA,EAAAA,MAACQ,EAAAA,EAAM,CAACC,QAAQ,QAAQR,UAAU,OAAMJ,SAAA,CAAC,cACzBO,EAAKF,cAThBE,EAAKF,oBCmBtC,EAjC4BU,MAExBC,EAAAA,EAAAA,IAAa,CACTC,MAAO,sBACPC,gBAAiB,CACb,CACIC,KAAM,6BACNC,MAAO,WAEX,CACID,KAAM,6BACNC,MAAO,sBACPC,QAAQ,OAMhBlB,EAAAA,EAAAA,MAAAmB,EAAAA,SAAA,CAAAtB,SAAA,EACIH,EAAAA,EAAAA,KAAC0B,EAAAA,EAAG,CAAAvB,UACAH,EAAAA,EAAAA,KAAC2B,EAAAA,EAAG,CAACC,GAAI,GAAGzB,UACRH,EAAAA,EAAAA,KAACF,EAAc,SAGvBE,EAAAA,EAAAA,KAAC0B,EAAAA,EAAG,CAAAvB,UACAH,EAAAA,EAAAA,KAAC2B,EAAAA,EAAG,CAACC,GAAI,GAAGzB,UACRH,EAAAA,EAAAA,KAACgB,EAAe,W","sources":["pages/uikit/PopoversAndTooltips/DefaultPopovers.tsx","pages/uikit/PopoversAndTooltips/DefaultTooltips.tsx","pages/uikit/PopoversAndTooltips/index.tsx"],"sourcesContent":["import { Button, Card, OverlayProps, OverlayTrigger, Popover } from 'react-bootstrap';\n\ntype Direction = {\n    placement: OverlayProps['placement'];\n};\n\nconst DefaultPopover = () => {\n    const directions: Direction[] = [\n        { placement: 'top' },\n        { placement: 'bottom' },\n        { placement: 'right' },\n        { placement: 'left' },\n    ];\n\n    const popover = (\n        <Popover id=\"popover-direction\">\n            <Popover.Body>And here's some amazing content. It's very engaging. Right?</Popover.Body>\n        </Popover>\n    );\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Popovers</h4>\n                <p className=\"sub-header\">\n                    Add small overlays of content, like those on the iPad, to any element for housing secondary\n                    information.\n                </p>\n                <div className=\"button-list\">\n                    {(directions || []).map((item) => (\n                        <OverlayTrigger\n                            trigger=\"click\"\n                            key={item.placement}\n                            placement={item.placement}\n                            overlay={\n                                <Popover  id={`popover-positioned-${item.placement}`}>\n                                    <Popover.Body>\n                                        Vivamus sagittis lacus vel augue laoreet rutrum faucibus.\n                                    </Popover.Body>\n                                </Popover>\n                            }\n                        >\n                            <Button variant=\"light\" className=\"me-1\">\n                                Popover on {item.placement}\n                            </Button>\n                        </OverlayTrigger>\n                    ))}\n\n                    <OverlayTrigger trigger=\"focus\" placement=\"right\" overlay={popover}>\n                        <Button>Dismissible popover</Button>\n                    </OverlayTrigger>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default DefaultPopover;\n","import { Button, Card, OverlayProps, OverlayTrigger, Tooltip } from 'react-bootstrap';\n\ntype Direction = {\n    placement: OverlayProps['placement'];\n};\n\nconst DefaultTooltips = () => {\n    const directions: Direction[] = [\n        { placement: 'top' },\n        { placement: 'bottom' },\n        { placement: 'right' },\n        { placement: 'left' },\n    ];\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Tooltips</h4>\n                <p className=\"text-muted font-14\">Four options are available: top, right, bottom, and left aligned.</p>\n\n                <div className=\"button-list\">\n                    {(directions || []).map((item) => (\n                        <OverlayTrigger\n                            key={item.placement}\n                            placement={item.placement}\n                            overlay={\n                                <Tooltip id={`tooltip-${item.placement}`}>\n                                    Tooltip on <strong>{item.placement}</strong>.\n                                </Tooltip>\n                            }\n                        >\n                            <Button variant=\"light\" className=\"me-1\">\n                                Tooltip on {item.placement}\n                            </Button>\n                        </OverlayTrigger>\n                    ))}\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default DefaultTooltips;\n","import { Col, Row } from 'react-bootstrap';\n\n// hooks\nimport { usePageTitle } from '../../../hooks';\n\n// component\nimport DefaultPopover from './DefaultPopovers';\nimport DefaultTooltips from './DefaultTooltips';\n\nconst PopoversAndTooltips = () => {\n    // set pagetitle\n    usePageTitle({\n        title: 'Tooltips & Popovers',\n        breadCrumbItems: [\n            {\n                path: '/base-ui/popovers-tooltips',\n                label: 'Base UI',\n            },\n            {\n                path: '/base-ui/popovers-tooltips',\n                label: 'Tooltips & Popovers',\n                active: true,\n            },\n        ],\n    });\n\n    return (\n        <>\n            <Row>\n                <Col xs={12}>\n                    <DefaultPopover />\n                </Col>\n            </Row>\n            <Row>\n                <Col xs={12}>\n                    <DefaultTooltips />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default PopoversAndTooltips;\n"],"names":["DefaultPopover","popover","_jsx","Popover","id","children","Body","Card","_jsxs","className","placement","map","item","OverlayTrigger","trigger","overlay","Button","variant","DefaultTooltips","Tooltip","PopoversAndTooltips","usePageTitle","title","breadCrumbItems","path","label","active","_Fragment","Row","Col","xs"],"sourceRoot":""}