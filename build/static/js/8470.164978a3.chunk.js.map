{"version":3,"file":"static/js/8470.164978a3.chunk.js","mappings":"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","sources":["components/Pagination.tsx","components/Table.tsx","pages/apps/Buyer-Data-Management/Interaction-History-View/data.tsx","pages/apps/Buyer-Data-Management/Interaction-History-View/index.tsx","../node_modules/react-bootstrap/esm/divWithClassName.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype PaginationProps = {\n    tableProps: any;\n    sizePerPageList: {\n        text: string;\n        value: number;\n    }[];\n};\n\nconst Pagination = ({ tableProps, sizePerPageList }: PaginationProps) => {\n    /**\n     * pagination count , index\n     */\n    const [pageCount, setPageCount] = useState<number>(tableProps.pageCount);\n    const [pageIndex, setPageIndex] = useState<number>(tableProps.state.pageIndex);\n\n    useEffect(() => {\n        setPageCount(tableProps.pageCount);\n        setPageIndex(tableProps.state.pageIndex);\n    }, [tableProps.pageCount, tableProps.state.pageIndex]);\n\n    /**\n     * get filter pages\n     */\n    const filterPages = useCallback(\n        (visiblePages: any, totalPages: number) => {\n            return visiblePages.filter((page: any) => page <= pageCount);\n        },\n        [pageCount]\n    );\n\n    /**\n     * handle visible pages\n     */\n    const getVisiblePages = useCallback(\n        (page: number | null, total: number) => {\n            if (total < 7) {\n                return filterPages([1, 2, 3, 4, 5, 6], total);\n            } else {\n                if (page! % 5 >= 0 && page! > 4 && page! + 2 < total) {\n                    return [1, page! - 1, page!, page! + 1, total];\n                } else if (page! % 5 >= 0 && page! > 4 && page! + 2 >= total) {\n                    return [1, total - 3, total - 2, total - 1, total];\n                } else {\n                    return [1, 2, 3, 4, 5, total];\n                }\n            }\n        },\n        [filterPages]\n    );\n\n    /**\n     * handle page change\n     * @param page - current page\n     * @returns\n     */\n    const changePage = (page: number) => {\n        const activePage = pageIndex + 1;\n\n        if (page === activePage) {\n            return;\n        }\n\n        const visiblePages = getVisiblePages(page, pageCount);\n        setVisiblePages(filterPages(visiblePages, pageCount));\n\n        tableProps.gotoPage(page - 1);\n    };\n\n    useEffect(() => {\n        const visiblePages = getVisiblePages(null, pageCount);\n        setVisiblePages(visiblePages);\n    }, [pageCount, getVisiblePages]);\n\n    const [visiblePages, setVisiblePages] = useState<number[]>(getVisiblePages(null, pageCount));\n    const activePage: number = pageIndex + 1;\n\n    return (\n        <>\n            <div className=\"d-lg-flex align-items-center text-center pb-1\">\n                {sizePerPageList.length > 0 && (\n                    <div className=\"d-inline-block me-3\">\n                        <label className=\"me-1\">Display :</label>\n                        <select\n                            value={tableProps.state.pageSize}\n                            onChange={(e: React.FormEvent<HTMLSelectElement>) => {\n                                tableProps.setPageSize(Number(e.currentTarget.value));\n                            }}\n                            className=\"form-select d-inline-block w-auto\"\n                        >\n                            {(sizePerPageList || []).map((pageSize, index) => {\n                                return (\n                                    <option key={index.toString()} value={pageSize.value}>\n                                        {pageSize.text}\n                                    </option>\n                                );\n                            })}\n                        </select>\n                    </div>\n                )}\n\n                <span className=\"me-3\">\n                    Page{' '}\n                    <strong>\n                        {pageIndex + 1} of {tableProps.pageOptions.length}\n                    </strong>{' '}\n                </span>\n\n                <span className=\"d-inline-block align-items-center text-sm-start text-center my-sm-0 my-2\">\n                    <label className=\"form-label\">Go to page : </label>\n                    <input\n                        type=\"number\"\n                        value={pageIndex + 1}\n                        min=\"1\"\n                        onChange={(e: React.FormEvent<HTMLInputElement>) => {\n                            const page = e.currentTarget.value ? Number(e.currentTarget.value) - 1 : 0;\n                            tableProps.gotoPage(page);\n                            setPageIndex(tableProps.state.pageIndex);\n                        }}\n                        className=\"form-control w-25 ms-1 d-inline-block\"\n                    />\n                </span>\n\n                <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0\">\n                    <li\n                        key=\"prevpage\"\n                        className={classNames('page-item', 'paginate_button', 'previous', {\n                            disabled: activePage === 1,\n                        })}\n                        onClick={() => {\n                            if (activePage === 1) return;\n                            changePage(activePage - 1);\n                        }}\n                    >\n                        <Link to=\"#\" className=\"page-link\">\n                            <i className=\"mdi mdi-chevron-left\"></i>\n                        </Link>\n                    </li>\n                    {(visiblePages || []).map((page, index, array) => {\n                        return array[index - 1] + 1 < page ? (\n                            <React.Fragment key={page}>\n                                <li className=\"page-item disabled d-none d-xl-inline-block\">\n                                    <Link to=\"#\" className=\"page-link\">\n                                        ...\n                                    </Link>\n                                </li>\n                                <li\n                                    className={classNames('page-item', 'd-none', 'd-xl-inline-block', {\n                                        active: activePage === page,\n                                    })}\n                                    onClick={(e: React.FormEvent<HTMLLIElement>) => changePage(page)}\n                                >\n                                    <Link to=\"#\" className=\"page-link\">\n                                        {page}\n                                    </Link>\n                                </li>\n                            </React.Fragment>\n                        ) : (\n                            <li\n                                key={page}\n                                className={classNames('page-item', 'd-none', 'd-xl-inline-block', {\n                                    active: activePage === page,\n                                })}\n                                onClick={(e: React.FormEvent<HTMLLIElement>) => changePage(page)}\n                            >\n                                <Link to=\"#\" className=\"page-link\">\n                                    {page}\n                                </Link>\n                            </li>\n                        );\n                    })}\n                    <li\n                        key=\"nextpage\"\n                        className={classNames('page-item', 'paginate_button', 'next', {\n                            disabled: activePage === tableProps.pageCount,\n                        })}\n                        onClick={() => {\n                            if (activePage === tableProps.pageCount) return;\n                            changePage(activePage + 1);\n                        }}\n                    >\n                        <Link to=\"#\" className=\"page-link\">\n                            <i className=\"mdi mdi-chevron-right\"></i>\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n        </>\n    );\n};\n\nexport default Pagination;\n","import { useRef, useEffect, forwardRef, useState } from 'react';\nimport {\n    useTable,\n    useSortBy,\n    usePagination,\n    useRowSelect,\n    useGlobalFilter,\n    useAsyncDebounce,\n    useExpanded,\n} from 'react-table';\nimport classNames from 'classnames';\n\n// components\nimport Pagination from './Pagination';\n\ntype GlobalFilterProps = {\n    preGlobalFilteredRows: any;\n    globalFilter: any;\n    setGlobalFilter: any;\n    searchBoxClass: any;\n};\n\n// Define a default UI for filtering\nconst GlobalFilter = ({ preGlobalFilteredRows, globalFilter, setGlobalFilter, searchBoxClass }: GlobalFilterProps) => {\n    const count = preGlobalFilteredRows.length;\n    const [value, setValue] = useState<any>(globalFilter);\n    const onChange = useAsyncDebounce((value) => {\n        setGlobalFilter(value || undefined);\n    }, 200);\n\n    return (\n        <div className={classNames(searchBoxClass)}>\n            <span className=\"d-flex align-items-center\">\n                Search :{' '}\n                <input\n                    type=\"search\"\n                    value={value || ''}\n                    onChange={(e: any) => {\n                        setValue(e.target.value);\n                        onChange(e.target.value);\n                    }}\n                    placeholder={`${count} records...`}\n                    className=\"form-control w-auto ms-1\"\n                />\n            </span>\n        </div>\n    );\n};\n\ntype IndeterminateCheckboxProps = {\n    indeterminate: any;\n    children?: React.ReactNode;\n};\n\nconst IndeterminateCheckbox = forwardRef<HTMLInputElement, IndeterminateCheckboxProps>(\n    ({ indeterminate, ...rest }, ref) => {\n        const defaultRef = useRef();\n        const resolvedRef: any = ref || defaultRef;\n\n        useEffect(() => {\n            resolvedRef.current.indeterminate = indeterminate;\n        }, [resolvedRef, indeterminate]);\n\n        return (\n            <>\n                <div className=\"form-check\">\n                    <input type=\"checkbox\" className=\"form-check-input\" ref={resolvedRef} {...rest} />\n                    <label htmlFor=\"form-check-input\" className=\"form-check-label\"></label>\n                </div>\n            </>\n        );\n    }\n);\n\ntype TableProps = {\n    isSearchable?: boolean;\n    isSortable?: boolean;\n    pagination?: boolean;\n    isSelectable?: boolean;\n    isExpandable?: boolean;\n    sizePerPageList?: {\n        text: string;\n        value: number;\n    }[];\n    columns: {\n        Header: string;\n        accessor: string;\n        sort?: boolean;\n        Cell?: any;\n        className?: string;\n    }[];\n    data: any[];\n    pageSize?: number;\n    searchBoxClass?: string;\n    tableClass?: string;\n    theadClass?: string;\n};\n\nconst Table = (props: TableProps) => {\n    const isSearchable = props['isSearchable'] || false;\n    const isSortable = props['isSortable'] || false;\n    const pagination = props['pagination'] || false;\n    const isSelectable = props['isSelectable'] || false;\n    const isExpandable = props['isExpandable'] || false;\n    const sizePerPageList = props['sizePerPageList'] || [];\n\n    let otherProps: any = {};\n\n    if (isSearchable) {\n        otherProps['useGlobalFilter'] = useGlobalFilter;\n    }\n    if (isSortable) {\n        otherProps['useSortBy'] = useSortBy;\n    }\n    if (isExpandable) {\n        otherProps['useExpanded'] = useExpanded;\n    }\n    if (pagination) {\n        otherProps['usePagination'] = usePagination;\n    }\n    if (isSelectable) {\n        otherProps['useRowSelect'] = useRowSelect;\n    }\n\n    const dataTable = useTable(\n        {\n            columns: props['columns'],\n            data: props['data'],\n            initialState: { pageSize: props['pageSize'] || 10 },\n        },\n        otherProps.hasOwnProperty('useGlobalFilter') && otherProps['useGlobalFilter'],\n        otherProps.hasOwnProperty('useSortBy') && otherProps['useSortBy'],\n        otherProps.hasOwnProperty('useExpanded') && otherProps['useExpanded'],\n        otherProps.hasOwnProperty('usePagination') && otherProps['usePagination'],\n        otherProps.hasOwnProperty('useRowSelect') && otherProps['useRowSelect'],\n        (hooks) => {\n            isSelectable &&\n                hooks.visibleColumns.push((columns: any) => [\n                    // Let's make a column for selection\n                    {\n                        id: 'selection',\n                        // The header can use the table's getToggleAllRowsSelectedProps method\n                        // to render a checkbox\n                        Header: ({ getToggleAllPageRowsSelectedProps }: any) => (\n                            <div>\n                                <IndeterminateCheckbox {...getToggleAllPageRowsSelectedProps()} />\n                            </div>\n                        ),\n                        // The cell can use the individual row's getToggleRowSelectedProps method\n                        // to the render a checkbox\n                        Cell: ({ row }: any) => (\n                            <div>\n                                <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n                            </div>\n                        ),\n                    },\n                    ...columns,\n                ]);\n\n            isExpandable &&\n                hooks.visibleColumns.push((columns: any) => [\n                    // Let's make a column for selection\n                    {\n                        // Build our expander column\n                        id: 'expander', // Make sure it has an ID\n                        Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }: any) => (\n                            <span {...getToggleAllRowsExpandedProps()}>{isAllRowsExpanded ? '-' : '+'}</span>\n                        ),\n                        Cell: ({ row }) =>\n                            // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n                            // to build the toggle for expanding a row\n                            row.canExpand ? (\n                                <span\n                                    {...row.getToggleRowExpandedProps({\n                                        style: {\n                                            // We can even use the row.depth property\n                                            // and paddingLeft to indicate the depth\n                                            // of the row\n                                            paddingLeft: `${row.depth * 2}rem`,\n                                        },\n                                    })}\n                                >\n                                    {row.isExpanded ? '-' : '+'}\n                                </span>\n                            ) : null,\n                    },\n                    ...columns,\n                ]);\n        }\n    );\n\n    let rows = pagination ? dataTable.page : dataTable.rows;\n\n    return (\n        <>\n            {isSearchable && (\n                <GlobalFilter\n                    preGlobalFilteredRows={dataTable.preGlobalFilteredRows}\n                    globalFilter={dataTable.state.globalFilter}\n                    setGlobalFilter={dataTable.setGlobalFilter}\n                    searchBoxClass={props['searchBoxClass']}\n                />\n            )}\n\n            <div className=\"table-responsive\">\n                <table\n                    {...dataTable.getTableProps()}\n                    className={classNames('table table-centered react-table', props['tableClass'])}\n                >\n                    <thead className={props['theadClass']}>\n                        {(dataTable.headerGroups || []).map((headerGroup: any) => (\n                            <tr {...headerGroup.getHeaderGroupProps()}>\n                                {(headerGroup.headers || []).map((column: any) => (\n                                    <th\n                                        {...column.getHeaderProps(column.sort && column.getSortByToggleProps())}\n                                        className={classNames({\n                                            sorting_desc: column.isSortedDesc === true,\n                                            sorting_asc: column.isSortedDesc === false,\n                                            sortable: column.sort === true,\n                                        })}\n                                    >\n                                        {column.render('Header')}\n                                    </th>\n                                ))}\n                            </tr>\n                        ))}\n                    </thead>\n                    <tbody {...dataTable.getTableBodyProps()}>\n                        {(rows || []).map((row: any, i: number) => {\n                            dataTable.prepareRow(row);\n                            return (\n                                <tr {...row.getRowProps()}>\n                                    {(row.cells || []).map((cell: any) => {\n                                        return (\n                                            <td\n                                                {...cell.getCellProps([\n                                                    {\n                                                        className: cell.column.className,\n                                                    },\n                                                ])}\n                                            >\n                                                {cell.render('Cell')}\n                                            </td>\n                                        );\n                                    })}\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </table>\n            </div>\n            {pagination && <Pagination tableProps={dataTable} sizePerPageList={sizePerPageList} />}\n        </>\n    );\n};\n\nexport default Table;\n","import { BuyerInteraction } from './types';\n\nconst interactionHistoryData:BuyerInteraction[] = [\n    {\n        id: \"#JD01\",\n        buyerName: \"Ravi Singh\",\n        date: \"2024-03-15\",\n        message: \"Hi, I am interested in the new product launch.\",\n        responseStatus: \"Responded\"\n    },\n    {\n        id: \"#JS02\",\n        buyerName: \"Rani Mehra\",\n        date: \"2024-03-14\",\n        message: \"Can you provide more details about my recent order?\",\n        responseStatus: \"Not Responded\"\n    },\n    {\n        id: \"#EJ03\",\n        buyerName: \"Tina Ambani\",\n        date: \"2024-03-13\",\n        message: \"I have a question about the return policy.\",\n        responseStatus: \"Responded\"\n    },\n    {\n        id: \"#MB04\",\n        buyerName: \"Rohan Joshi\",\n        date: \"2024-03-12\",\n        message: \"When will the next sale be?\",\n        responseStatus: \"Responded\"\n    },\n    {\n        id: \"#LW05\",\n        buyerName: \"Chinmay Kamat\",\n        date: \"2024-03-11\",\n        message: \"I'm facing issues with my account.\",\n        responseStatus: \"Not Responded\"\n    },\n    {\n        id: \"#RG06\",\n        buyerName: \"Swara Shetye\",\n        date: \"2024-03-10\",\n        message: \"Do you have recommendations for gifts?\",\n        responseStatus: \"Responded\"\n    },\n    {\n        id: \"#MM07\",\n        buyerName: \"Saket Kumar\",\n        date: \"2024-03-09\",\n        message: \"Thank you for the prompt delivery!\",\n        responseStatus: \"Responded\"\n    },\n    {\n        id: \"#DW08\",\n        buyerName: \"Raj Padukone\",\n        date: \"2024-04-20\",\n        message: \"Can I change my shipping address?\",\n        responseStatus: \"Not Responded\"\n    },\n];\n\nexport {interactionHistoryData}\n","import React, { useState, useEffect } from 'react';\nimport { Card, Button } from 'react-bootstrap';\nimport { interactionHistoryData } from './data'; // Assume this function fetches data from an API\nimport Table from '../../../../components/Table';\nimport { usePageTitle } from '../../../../hooks';\n\n\n\nconst sizePerPageList = [\n    {\n        text: '5',\n        value: 5,\n    },\n    {\n        text: '10',\n        value: 10,\n    },\n    {\n        text: '25',\n        value: 25,\n    },\n    {\n        text: 'All',\n        value: interactionHistoryData.length,\n    },\n];\nconst BuyerInteractionHistoryViewer = () => {\n    const [interactionData, setInteractions] = useState(interactionHistoryData);\n    const [loading, setLoading] = useState(true);\n    usePageTitle({\n        title: 'Interaction History Viewer',\n        breadCrumbItems: [\n            { path: '/buyer-management/interaction-history-view', label: 'Interaction History Viewer' },\n            { path: '/buyer-management/interaction-history-view', label: 'Interaction History Viewer', active: true },\n        ],\n    });\n\n    const columns = [\n        {\n            Header: 'ID',\n            accessor: 'id',\n            Cell: ({ value }: any) => value || '-',\n        },\n        {\n            Header: 'Buyer Name',\n            accessor: 'buyerName',\n            Cell: ({ value }: any) => value || '-',\n        },\n        {\n            Header: 'Interaction Date',\n            accessor: 'date',\n            Cell: ({ value }: any) => value || '-',\n        },\n        {\n            Header: 'Message',\n            accessor: 'message',\n            Cell: ({ value }: any) => value || '-',\n        },\n        {\n            Header: 'Response Statu',\n            accessor: 'responseStatus',\n            Cell: ({ value }: any) => value || '-',\n        },\n    ];\n    useEffect(() => {\n        if (interactionData) {\n            setLoading(false)\n        }\n    }, []);\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Buyer Interaction History Viewer</h4>\n                <p className=\"text-muted font-14 mb-4\">The Buyer Interaction History Viewer empowers admins to effortlessly access and analyze detailed interaction histories with buyers via WhatsApp. This feature serves as a comprehensive repository of communication, enabling admins to review past conversations, track engagement patterns, and understand buyer preferences. By consolidating interaction data into a user-friendly interface, admins can enhance customer relationships, tailor marketing strategies, and respond proactively to buyer needs. Experience a seamless connection with your buyers, ensuring every interaction is informed and impactful.\n                </p>\n                <Table\n                    columns={columns}\n                    data={interactionData}\n                    pageSize={5}\n                    sizePerPageList={sizePerPageList}\n                    isSortable={true}\n                    pagination={true}\n                    isSearchable={true}\n                />\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default BuyerInteractionHistoryViewer;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", {\n  ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));"],"names":["_ref","tableProps","sizePerPageList","pageCount","setPageCount","useState","pageIndex","setPageIndex","state","useEffect","filterPages","useCallback","visiblePages","totalPages","filter","page","getVisiblePages","total","changePage","setVisiblePages","gotoPage","activePage","_jsx","_Fragment","children","_jsxs","className","length","value","pageSize","onChange","e","setPageSize","Number","currentTarget","map","index","text","toString","pageOptions","type","min","classNames","disabled","onClick","Link","to","array","React","active","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","searchBoxClass","count","setValue","useAsyncDebounce","undefined","target","placeholder","IndeterminateCheckbox","forwardRef","_ref2","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","current","htmlFor","props","isSearchable","isSortable","pagination","isSelectable","isExpandable","otherProps","useGlobalFilter","useSortBy","useExpanded","usePagination","useRowSelect","dataTable","useTable","columns","data","initialState","hasOwnProperty","hooks","visibleColumns","push","id","Header","_ref3","getToggleAllPageRowsSelectedProps","Cell","_ref4","row","getToggleRowSelectedProps","_ref5","getToggleAllRowsExpandedProps","isAllRowsExpanded","_ref6","canExpand","getToggleRowExpandedProps","style","paddingLeft","depth","isExpanded","rows","getTableProps","headerGroups","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","sort","getSortByToggleProps","sorting_desc","isSortedDesc","sorting_asc","sortable","render","getTableBodyProps","i","prepareRow","getRowProps","cells","cell","getCellProps","Pagination","interactionHistoryData","buyerName","date","message","responseStatus","BuyerInteractionHistoryViewer","interactionData","setInteractions","loading","setLoading","usePageTitle","title","breadCrumbItems","path","label","Card","Body","Table","accessor","p"],"sourceRoot":""}