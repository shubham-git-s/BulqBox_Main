{"version":3,"file":"static/js/8267.609392fc.chunk.js","mappings":"gLASA,MA+CA,EA/CuBA,IAAuC,IAAtC,QAAEC,GAA8BD,EACpD,OACIE,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAC,UACDC,EAAAA,EAAAA,MAACF,EAAAA,EAAKG,KAAI,CAACC,UAAU,cAAaH,SAAA,EAC9BC,EAAAA,EAAAA,MAACG,EAAAA,EAAQ,CAACD,UAAU,YAAYE,MAAM,MAAKL,SAAA,EACvCF,EAAAA,EAAAA,KAACM,EAAAA,EAASE,OAAM,CAACC,GAAG,IAAIJ,UAAU,2BAA0BH,UACxDF,EAAAA,EAAAA,KAAA,KAAGK,UAAU,6BAEjBF,EAAAA,EAAAA,MAACG,EAAAA,EAASI,KAAI,CAAAR,SAAA,EACVF,EAAAA,EAAAA,KAACM,EAAAA,EAASK,KAAI,CAAAT,SAAC,YACfF,EAAAA,EAAAA,KAACM,EAAAA,EAASK,KAAI,CAAAT,SAAC,sBACfF,EAAAA,EAAAA,KAACM,EAAAA,EAASK,KAAI,CAAAT,SAAC,oBACfF,EAAAA,EAAAA,KAACM,EAAAA,EAASK,KAAI,CAAAT,SAAC,0BAGvBC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,OACIY,IAAKb,EAAQc,OACbC,IAAI,eACJT,UAAU,iDAEdL,EAAAA,EAAAA,KAAA,KAAGK,UAAU,0BAAyBH,SAAEH,EAAQgB,aAChDZ,EAAAA,EAAAA,MAAA,OAAKE,UAAU,aAAYH,SAAA,EACvBC,EAAAA,EAAAA,MAAA,KAAGE,UAAU,qBAAoBH,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,gBAAoB,KAACF,EAAAA,EAAAA,KAAA,QAAMK,UAAU,OAAMH,SAAEH,EAAQiB,WAGjEb,EAAAA,EAAAA,MAAA,KAAGE,UAAU,qBAAoBH,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,cACRF,EAAAA,EAAAA,KAAA,QAAMK,UAAU,OAAMH,SAAEH,EAAQkB,aAGpCd,EAAAA,EAAAA,MAAA,KAAGE,UAAU,qBAAoBH,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YAAgB,KAACF,EAAAA,EAAAA,KAAA,QAAMK,UAAU,OAAMH,SAAEH,EAAQmB,YAG7Df,EAAAA,EAAAA,MAAA,KAAGE,UAAU,qBAAoBH,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,eAAmB,KAACF,EAAAA,EAAAA,KAAA,QAAMK,UAAU,OAAMH,SAAEH,EAAQoB,kBAGpEnB,EAAAA,EAAAA,KAACoB,EAAAA,EAAM,CAACf,UAAU,wCAAuCH,SAAC,wBAG/D,C,+ECzCf,MA0CA,EA1CqBJ,IAMkB,IAN8C,cACjFuB,EAAa,SACbC,EAAQ,SACRpB,EAAQ,SACRqB,EAAQ,UACRC,GAC6B1B,EAI7B,MAAM2B,GAAUC,EAAAA,EAAAA,IAAqB,CACjCL,cAAeA,EACfC,cAEE,aACFK,EAAY,SACZC,EAAQ,QACRC,EACAC,WAAW,OAAEC,IACbN,EAEJ,OACIzB,EAAAA,EAAAA,KAAA,QAAMuB,SAAUI,EAAaJ,GAAWlB,UAAWmB,EAAWQ,YAAU,EAAA9B,SACnE+B,MAAMC,QAAQhC,GACTA,EAASiC,KAAKC,GACHA,EAAMC,OAASD,EAAMC,MAAMrB,KAC5BsB,EAAAA,cAAoBF,EAAMG,KAAM,IACzB,IACIH,EAAMC,MACTT,WACAY,IAAKJ,EAAMC,MAAMrB,KACjBe,SACAF,aAGRO,IAEVlC,GACH,E,8CCvBf,MAAMuC,EAAgB3C,IASC,IAAD4C,EAAA,IATC,KACnB1B,EAAI,YACJ2B,EAAW,YACXC,EAAW,OACXb,EAAM,QACNF,EAAO,SACPD,EAAQ,UACRvB,KACGwC,GACU/C,EACb,MAAOgD,EAAcC,IAAmBC,EAAAA,EAAAA,WAAkB,GAE1D,OACI7C,EAAAA,EAAAA,MAAA8C,EAAAA,SAAA,CAAA/C,SAAA,EACIC,EAAAA,EAAAA,MAAC+C,EAAAA,EAAU,CAAC7C,UAAU,OAAMH,SAAA,EACxBF,EAAAA,EAAAA,KAACmD,EAAAA,EAAKC,QAAO,CACTb,KAAMO,EAAe,OAAS,WAC9BH,YAAaA,EACb3B,KAAMA,EACNqC,GAAIrC,EACJP,GAAG,QACH6C,IAAMC,IACEX,GAAaA,EAAYW,EAAE,EAEnClD,UAAWA,EACXmD,aAAWzB,IAAUA,EAAOf,OACvBY,EAAWA,EAASZ,GAAQ,CAAC,EAClCyC,aAAczC,KACV6B,KAER7C,EAAAA,EAAAA,KAAA,OACIK,UAAWqD,IAAW,mBAAoB,uBAAwB,CAC9D,gBAAiBZ,IAErB,gBAAeA,EAAe,OAAS,QAAQ5C,UAE/CF,EAAAA,EAAAA,KAAA,QACIK,UAAU,eACVsD,QAASA,KACLZ,GAAiBD,EAAa,SAM7Cf,GAAUA,EAAOf,IACdhB,EAAAA,EAAAA,KAACmD,EAAAA,EAAKC,QAAQQ,SAAQ,CAACrB,KAAK,UAAUlC,UAAU,UAASH,SACzC,QADyCwC,EACrDX,EAAOf,UAAK,IAAA0B,OAAA,EAAZA,EAAwB,UAE5B,OACL,EAKLmB,EAAeC,IAYE,IAADC,EAAA,IAZA,KAClBxB,EAAI,KACJvB,EAAI,YACJ2B,EAAW,QACXqB,EAAO,SACPpC,EAAQ,OACRG,EAAM,KACNkC,EAAI,KACJC,EAAI,UACJ7D,EAAS,YACTuC,KACGC,GACUiB,EACb,OACI9D,EAAAA,EAAAA,KAAAiD,EAAAA,SAAA,CAAA/C,SACc,aAATqC,GAAuByB,GACpBhE,EAAAA,EAAAA,KAAAiD,EAAAA,SAAA,CAAA/C,UACIF,EAAAA,EAAAA,KAACyC,EAAa,CACVzB,KAAMA,EACN2B,YAAaA,EACbC,YAAaA,EACbb,OAAQA,EACRH,SAAUA,EACVvB,UAAWA,KACPwC,OAIZ1C,EAAAA,EAAAA,MAAA8C,EAAAA,SAAA,CAAA/C,SAAA,EACIF,EAAAA,EAAAA,KAACmD,EAAAA,EAAKC,QAAO,CACTb,KAAMA,EACNI,YAAaA,EACb3B,KAAMA,EACNP,GAAIwD,EACJZ,GAAIrC,EACJsC,IAAMC,IACEX,GAAaA,EAAYW,EAAE,EAEnClD,UAAWA,EACXmD,aAAWzB,IAAUA,EAAOf,OACvBY,EAAWA,EAASZ,GAAQ,CAAC,EAClCkD,KAAMA,KACFrB,IAGPd,GAAUA,EAAOf,IACdhB,EAAAA,EAAAA,KAACmD,EAAAA,EAAKC,QAAQQ,SAAQ,CAACrB,KAAK,UAAUlC,UAAU,UAASH,SACzC,QADyC6D,EACrDhC,EAAOf,UAAK,IAAA+C,OAAA,EAAZA,EAAwB,UAE5B,SAGb,EAKLI,EAAaC,IAYI,IAADC,EAAA,IAZF,KAChB9B,EAAI,MACJ+B,EAAK,KACLtD,EAAI,YACJ2B,EAAW,SACXf,EAAQ,OACRG,EAAM,KACNkC,EAAI,KACJC,EAAI,UACJ7D,EAAS,YACTuC,KACGC,GACUuB,EACb,OACIjE,EAAAA,EAAAA,MAAA8C,EAAAA,SAAA,CAAA/C,SAAA,EACIF,EAAAA,EAAAA,KAACmD,EAAAA,EAAKoB,MAAK,CACPhC,KAAMA,EACN+B,MAAOA,EACPtD,KAAMA,EACNqC,GAAIrC,EACJsC,IAAMC,IACEX,GAAaA,EAAYW,EAAE,EAEnClD,UAAWA,EACXmD,aAAWzB,IAAUA,EAAOf,OACvBY,EAAWA,EAASZ,GAAQ,CAAC,KAC9B6B,IAGPd,GAAUA,EAAOf,IACdhB,EAAAA,EAAAA,KAACmD,EAAAA,EAAKC,QAAQQ,SAAQ,CAACrB,KAAK,UAAUlC,UAAU,UAASH,SACxC,QADwCmE,EACpDtC,EAAOf,UAAK,IAAAqD,OAAA,EAAZA,EAAwB,UAE7B,OACL,EAKLG,EAAcC,IAYG,IAADC,EAAA,IAZD,KACjBnC,EAAI,MACJ+B,EAAK,KACLtD,EAAI,YACJ2B,EAAW,SACXf,EAAQ,OACRG,EAAM,KACNkC,EAAI,UACJ5D,EAAS,SACTH,EAAQ,YACR0C,KACGC,GACU4B,EACb,OACItE,EAAAA,EAAAA,MAAA8C,EAAAA,SAAA,CAAA/C,SAAA,EACIF,EAAAA,EAAAA,KAACmD,EAAAA,EAAKwB,OAAM,CACRpC,KAAMA,EACN+B,MAAOA,EACPtD,KAAMA,EACNqC,GAAIrC,EACJsC,IAAMC,IACEX,GAAaA,EAAYW,EAAE,EAEnCrD,SAAUA,EACVG,UAAWA,EACXmD,aAAWzB,IAAUA,EAAOf,OACvBY,EAAWA,EAASZ,GAAQ,CAAC,KAC9B6B,IAGPd,GAAUA,EAAOf,IACdhB,EAAAA,EAAAA,KAACmD,EAAAA,EAAKC,QAAQQ,SAAQ,CAACrB,KAAK,UAASrC,SAAc,QAAdwE,EAAE3C,EAAOf,UAAK,IAAA0D,OAAA,EAAZA,EAAwB,UAC/D,OACL,EAyGX,EArGkBE,IAiBK,IAjBJ,MACfN,EAAK,KACL/B,EAAI,KACJvB,EAAI,YACJ2B,EAAW,QACXqB,EAAO,SACPpC,EAAQ,OACRG,EAAM,QACNF,EAAO,UACPxB,EAAS,eACTwE,EAAc,eACdC,EAAc,YACdlC,EAAW,SACX1C,EAAQ,OACR6E,EAAM,KACNb,KACGrB,GACU+B,EAEb,MAAMX,EAAgB,aAAT1B,EAAsB,WAAsB,WAATA,EAAoB,SAAW,QAEzEyC,OAAyBC,IAAZjB,GAAwBA,EAE3C,OACIhE,EAAAA,EAAAA,KAAAiD,EAAAA,SAAA,CAAA/C,SACc,WAATqC,GACGvC,EAAAA,EAAAA,KAAA,SAAOuC,KAAMA,EAAMvB,KAAMA,KAAWY,EAAWA,EAASZ,GAAQ,CAAC,KAAQ6B,KAEzE7C,EAAAA,EAAAA,KAAAiD,EAAAA,SAAA,CAAA/C,SACc,WAATqC,GACGpC,EAAAA,EAAAA,MAACgD,EAAAA,EAAK+B,MAAK,CAAC7E,UAAWyE,EAAe5E,SAAA,CACjCoE,GACGnE,EAAAA,EAAAA,MAAA8C,EAAAA,SAAA,CAAA/C,SAAA,EACIF,EAAAA,EAAAA,KAACmD,EAAAA,EAAKgC,MAAK,CAAC9E,UAAWwE,EAAe3E,SAAEoE,IACvCS,GAAUA,KAEf,MAEJ/E,EAAAA,EAAAA,KAACwE,EAAW,CACRjC,KAAMA,EACNvB,KAAMA,EACN2B,YAAaA,EACbC,YAAaA,EACbb,OAAQA,EACRH,SAAUA,EACVqC,KAAMA,EACN5D,UAAWA,EACXH,SAAUA,KACN2C,QAIZ7C,EAAAA,EAAAA,KAAAiD,EAAAA,SAAA,CAAA/C,SACc,aAATqC,GAAgC,UAATA,GACpBvC,EAAAA,EAAAA,KAACmD,EAAAA,EAAK+B,MAAK,CAAC7E,UAAWyE,EAAe5E,UAClCF,EAAAA,EAAAA,KAACmE,EAAU,CACP5B,KAAMA,EACN+B,MAAOA,EACPtD,KAAMA,EACN2B,YAAaA,EACbC,YAAaA,EACbb,OAAQA,EACRH,SAAUA,EACVqC,KAAMA,EACN5D,UAAWA,EACX6D,KAAMA,KACFrB,OAIZ1C,EAAAA,EAAAA,MAACgD,EAAAA,EAAK+B,MAAK,CAAC7E,UAAWyE,EAAe5E,SAAA,CACjCoE,GACGnE,EAAAA,EAAAA,MAAA8C,EAAAA,SAAA,CAAA/C,SAAA,EACIF,EAAAA,EAAAA,KAACmD,EAAAA,EAAKgC,MAAK,CAAC9E,UAAWwE,EAAe3E,SAAEoE,IACvCS,GAAUA,KAEf,MAEJ/E,EAAAA,EAAAA,KAAC6D,EAAY,CACTtB,KAAMA,EACNvB,KAAMA,EACN2B,YAAaA,EACbqB,QAASgB,EACTpC,YAAaA,EACbb,OAAQA,EACRH,SAAUA,EACVqC,KAAMA,EACN5D,UAAWA,EACX6D,KAAMA,KACFrB,YAQjC,C,4KC5SX,MAAMuC,EAAsB,CACxB,CACI/B,GAAI,EACJxC,O,SACAE,UACI,wIACJC,KAAM,gBACNC,OAAQ,iBACRC,MAAO,mBACPC,SAAU,OAEd,CACIkC,GAAI,EACJxC,O,QACAE,UACI,wIACJC,KAAM,gBACNC,OAAQ,iBACRC,MAAO,mBACPC,SAAU,OAEd,CACIkC,GAAI,EACJxC,O,SACAE,UACI,wIACJC,KAAM,gBACNC,OAAQ,iBACRC,MAAO,mBACPC,SAAU,OAEd,CACIkC,GAAI,EACJxC,O,SACAE,UACI,wIACJC,KAAM,gBACNC,OAAQ,iBACRC,MAAO,mBACPC,SAAU,OAEd,CACIkC,GAAI,EACJxC,O,SACAE,UACI,uIACJC,KAAM,gBACNC,OAAQ,iBACRC,MAAO,mBACPC,SAAU,OAEd,CACIkC,GAAI,EACJxC,O,QACAE,UACI,wIACJC,KAAM,gBACNC,OAAQ,iBACRC,MAAO,mBACPC,SAAU,Q,eC7ClB,MAmIA,EAnIakE,MAETC,EAAAA,EAAAA,IAAa,CACTC,MAAO,gBACPC,gBAAiB,CACb,CACIC,KAAM,sBACNnB,MAAO,YAEX,CACImB,KAAM,sBACNnB,MAAO,gBACPoB,QAAQ,MAKpB,MAAOC,EAAOC,IAAY5C,EAAAA,EAAAA,WAAkB,GAGtC6C,EAASA,KACXD,GAAUD,EAAM,EAIdG,GAAiBC,EAAAA,EAAAA,GACnBC,EAAAA,KAAaC,MAAM,CACfjF,KAAMgF,EAAAA,KAAaE,SAAS,qBAC5BC,SAAUH,EAAAA,KAAaE,SAAS,8BAChCE,QAASJ,EAAAA,KAAaE,SAAS,kCAC/BhF,MAAO8E,EAAAA,KAAaE,SAAS,8BAA8BhF,MAAM,wBAGzE,OACIf,EAAAA,EAAAA,MAAA8C,EAAAA,SAAA,CAAA/C,SAAA,EACIF,EAAAA,EAAAA,KAACqG,EAAAA,EAAG,CAAAnG,UACAF,EAAAA,EAAAA,KAACsG,EAAAA,EAAG,CAACC,GAAI,GAAGrG,UACRF,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAC,UACDF,EAAAA,EAAAA,KAACC,EAAAA,EAAKG,KAAI,CAAAF,UACNC,EAAAA,EAAAA,MAACkG,EAAAA,EAAG,CAAChG,UAAU,yBAAwBH,SAAA,EACnCF,EAAAA,EAAAA,KAACsG,EAAAA,EAAG,CAACE,GAAI,EAAEtG,UACPF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,eAAcH,UACzBC,EAAAA,EAAAA,MAACiB,EAAAA,EAAM,CAACqF,QAAQ,UAAUpG,UAAU,2BAA2BsD,QAASkC,EAAO3F,SAAA,EAC3EF,EAAAA,EAAAA,KAAA,KAAGK,UAAU,6BAA+B,sBAKxDL,EAAAA,EAAAA,KAACsG,EAAAA,EAAG,CAACE,GAAI,EAAEtG,UACPC,EAAAA,EAAAA,MAAA,QAAME,UAAU,6DAA4DH,SAAA,EACxEF,EAAAA,EAAAA,KAAA,SAAOK,UAAU,OAAMH,SAAC,aACxBC,EAAAA,EAAAA,MAACuG,EAAAA,EAAS,CAACnE,KAAK,SAASvB,KAAK,OAAMd,SAAA,EAChCF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,SACRF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,UACRF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,UACRF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,eACRF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,mBAEZF,EAAAA,EAAAA,KAAC0G,EAAAA,EAAS,CACNnE,KAAK,SACLvB,KAAK,SACL2B,YAAY,YACZtC,UAAU,6BAS1CL,EAAAA,EAAAA,KAACqG,EAAAA,EAAG,CAAAnG,UACEkF,GAAY,IAAIjD,KAAI,CAACpC,EAAS4G,KAExB3G,EAAAA,EAAAA,KAACsG,EAAAA,EAAG,CAACM,GAAI,EAAGJ,GAAI,EAAEtG,UACdF,EAAAA,EAAAA,KAAC6G,EAAAA,EAAc,CAAC9G,QAASA,KADL4G,EAAMG,iBAM1C3G,EAAAA,EAAAA,MAAC4G,EAAAA,EAAK,CAACC,KAAMrB,EAAOsB,OAAQpB,EAAQqB,UAAQ,EAAAhH,SAAA,EACxCF,EAAAA,EAAAA,KAAC+G,EAAAA,EAAMI,OAAM,CAACC,aAAW,EAAAlH,UACrBF,EAAAA,EAAAA,KAAC+G,EAAAA,EAAMM,MAAK,CAAC5G,GAAG,KAAIP,SAAC,mBAEzBF,EAAAA,EAAAA,KAAC+G,EAAAA,EAAM3G,KAAI,CAAAF,UACPC,EAAAA,EAAAA,MAACmH,EAAAA,EAAY,CAAa/F,SAAUA,OAAUD,SAAUwE,EAAgBzE,cAAe,CAAC,EAAEnB,SAAA,EACtFF,EAAAA,EAAAA,KAAC0G,EAAAA,EAAS,CACNpC,MAAO,OACP/B,KAAK,OACLvB,KAAK,OACL2B,YAAY,aACZmC,eAAgB,UAGpB9E,EAAAA,EAAAA,KAAC0G,EAAAA,EAAS,CACNpC,MAAO,WACP/B,KAAK,OACLvB,KAAK,WACL2B,YAAY,iBACZmC,eAAgB,UAGpB9E,EAAAA,EAAAA,KAAC0G,EAAAA,EAAS,CACNpC,MAAO,UACP/B,KAAK,OACLvB,KAAK,UACL2B,YAAY,gBACZmC,eAAgB,UAGpB9E,EAAAA,EAAAA,KAAC0G,EAAAA,EAAS,CACNpC,MAAO,gBACP/B,KAAK,QACLvB,KAAK,QACL2B,YAAY,cACZmC,eAAgB,UAGpB9E,EAAAA,EAAAA,KAACoB,EAAAA,EAAM,CAACqF,QAAQ,QAAQpG,UAAU,gCAAgCkC,KAAK,SAAQrC,SAAC,UAGhFF,EAAAA,EAAAA,KAACoB,EAAAA,EAAM,CAACqF,QAAQ,SAASpG,UAAU,2BAA2BsD,QAASkC,EAAO3F,SAAC,qBAM5F,C","sources":["components/ContactDetails.tsx","components/form/VerticalForm.tsx","components/form/FormInput.tsx","pages/apps/Contacts/List/data.ts","pages/apps/Contacts/List/index.tsx"],"sourcesContent":["import { Button, Card, Dropdown } from 'react-bootstrap';\n\n// types\nimport { Contact } from '../pages/apps/Contacts/List/types';\n\ntype ContactDetailsProps = {\n    contact: Contact;\n};\n\nconst ContactDetails = ({ contact }: ContactDetailsProps) => {\n    return (\n        <Card>\n            <Card.Body className=\"text-center\">\n                <Dropdown className=\"float-end\" align=\"end\">\n                    <Dropdown.Toggle as=\"a\" className=\"cursor-pointer card-drop\">\n                        <i className=\"mdi mdi-dots-vertical\"></i>\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Action</Dropdown.Item>\n                        <Dropdown.Item>Anothther Action</Dropdown.Item>\n                        <Dropdown.Item>Something Else</Dropdown.Item>\n                        <Dropdown.Item>Separated link</Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n                <div>\n                    <img\n                        src={contact.avatar}\n                        alt=\"profileImage\"\n                        className=\"rounded-circle avatar-xl img-thumbnail mb-2\"\n                    />\n                    <p className=\"text-muted font-13 mb-3\">{contact.shortDesc}</p>\n                    <div className=\"text-start\">\n                        <p className=\"text-muted font-13\">\n                            <strong>Full Name :</strong> <span className=\"ms-2\">{contact.name}</span>\n                        </p>\n\n                        <p className=\"text-muted font-13\">\n                            <strong>Mobile :</strong>\n                            <span className=\"ms-2\">{contact.mobile}</span>\n                        </p>\n\n                        <p className=\"text-muted font-13\">\n                            <strong>Email :</strong> <span className=\"ms-2\">{contact.email}</span>\n                        </p>\n\n                        <p className=\"text-muted font-13\">\n                            <strong>Location :</strong> <span className=\"ms-2\">{contact.location}</span>\n                        </p>\n                    </div>\n                    <Button className=\"rounded-pill waves-effect waves-light\">Send Message</Button>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default ContactDetails;\n","import React from 'react';\nimport { useForm, Resolver, SubmitHandler, UnpackNestedValue, DeepPartial, FieldValues, DefaultValues } from 'react-hook-form';\n\ntype VerticalFromProps<TFormValues extends FieldValues> = {\n    defaultValues?: UnpackNestedValue<DeepPartial<TFormValues>>;\n    resolver?: Resolver<TFormValues>;\n    children?: React.ReactNode;\n    onSubmit: SubmitHandler<TFormValues>;\n    formClass?: string;\n};\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({\n        defaultValues: defaultValues as DefaultValues<TFormValues>,\n        resolver,\n    });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","import { useState, InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport { FieldErrors, Control } from 'react-hook-form';\n\ntype FormInputProps = InputHTMLAttributes<HTMLInputElement> & {\n    endIcon?: boolean;\n    label?: string;\n    type?: string;\n    name: string;\n    comp?: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    textClassName?: string;\n    refCallback?: any;\n    action?: React.ReactNode;\n    rows?: number;\n};\n\n/* Password Input with addons */\nconst PasswordInput = ({\n    name,\n    placeholder,\n    refCallback,\n    errors,\n    control,\n    register,\n    className,\n    ...otherProps\n}: FormInputProps) => {\n    const [showPassword, setShowPassword] = useState<boolean>(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                    {...otherProps}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}\n                >\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}\n                    ></span>\n                </div>\n            </InputGroup>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                   {errors[name]?.['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            {type === 'password' && endIcon ? (\n                <>\n                    <PasswordInput\n                        name={name}\n                        placeholder={placeholder}\n                        refCallback={refCallback}\n                        errors={errors!}\n                        register={register}\n                        className={className}\n                        {...otherProps}\n                    />\n                </>\n            ) : (\n                <>\n                    <Form.Control\n                        type={type}\n                        placeholder={placeholder}\n                        name={name}\n                        as={comp}\n                        id={name}\n                        ref={(r: HTMLInputElement) => {\n                            if (refCallback) refCallback(r);\n                        }}\n                        className={className}\n                        isInvalid={errors && errors[name] ? true : false}\n                        {...(register ? register(name) : {})}\n                        rows={rows}\n                        {...otherProps}\n                    ></Form.Control>\n\n                    {errors && errors[name] ? (\n                        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                           {errors[name]?.['message']}\n                        </Form.Control.Feedback>\n                    ) : null}\n                </>\n            )}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]?.['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    className,\n    children,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                children={children}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]?.['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    const hasEndIcon = endIcon !== undefined ? endIcon : true;\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n\n                            <SelectInput\n                                type={type}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                children={children}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : (\n                        <>\n                            {type === 'checkbox' || type === 'radio' ? (\n                                <Form.Group className={containerClass}>\n                                    <CheckInput\n                                        type={type}\n                                        label={label}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            ) : (\n                                <Form.Group className={containerClass}>\n                                    {label ? (\n                                        <>\n                                            <Form.Label className={labelClassName}>{label}</Form.Label>\n                                            {action && action}\n                                        </>\n                                    ) : null}\n\n                                    <TextualInput\n                                        type={type}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        endIcon={hasEndIcon}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","// types\nimport { Contact } from './types';\n\n// images\nimport avatar1 from '../../../../assets/images/users/user-10.jpg';\nimport avatar2 from '../../../../assets/images/users/user-9.jpg';\nimport avatar3 from '../../../../assets/images/users/user-8.jpg';\nimport avatar4 from '../../../../assets/images/users/user-7.jpg';\nimport avatar5 from '../../../../assets/images/users/user-6.jpg';\nimport avatar6 from '../../../../assets/images/users/user-5.jpg';\n\nconst contacts: Contact[] = [\n    {\n        id: 1,\n        avatar: avatar1,\n        shortDesc:\n            'Hi I am Johnathn Deo, has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type.',\n        name: 'Johnathan Deo',\n        mobile: '(123) 123 1234',\n        email: 'user@bulqbox.com',\n        location: 'USA',\n    },\n    {\n        id: 2,\n        avatar: avatar2,\n        shortDesc:\n            'Hi I am Johnathn Deo, has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type.',\n        name: 'Johnathan Deo',\n        mobile: '(123) 123 1234',\n        email: 'user@bulqbox.com',\n        location: 'USA',\n    },\n    {\n        id: 3,\n        avatar: avatar3,\n        shortDesc:\n            'Hi I am Johnathn Deo, has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type.',\n        name: 'Johnathan Deo',\n        mobile: '(123) 123 1234',\n        email: 'user@bulqbox.com',\n        location: 'USA',\n    },\n    {\n        id: 4,\n        avatar: avatar4,\n        shortDesc:\n            'Hi I am Johnathn Deo, has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type.',\n        name: 'Johnathan Deo',\n        mobile: '(123) 123 1234',\n        email: 'user@bulqbox.com',\n        location: 'USA',\n    },\n    {\n        id: 5,\n        avatar: avatar5,\n        shortDesc:\n            'Hi I am Johnathn Deo, has been the industrys standard dummy text ever since the5500s, when an unknown printer took a galley of type.',\n        name: 'Johnathan Deo',\n        mobile: '(123) 123 1234',\n        email: 'user@bulqbox.com',\n        location: 'USA',\n    },\n    {\n        id: 6,\n        avatar: avatar6,\n        shortDesc:\n            'Hi I am Johnathn Deo, has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type.',\n        name: 'Johnathan Deo',\n        mobile: '(123) 123 1234',\n        email: 'user@bulqbox.com',\n        location: 'USA',\n    },\n];\n\nexport { contacts };\n","import { useState } from 'react';\nimport { Button, Card, Col, Modal, Row } from 'react-bootstrap';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n// hooks\nimport { usePageTitle } from '../../../../hooks';\n\n// component\nimport { VerticalForm, FormInput } from '../../../../components/form';\n\nimport ContactDetails from '../../../../components/ContactDetails';\n\n// data\nimport { contacts } from './data';\n\n// dummy data\n\ntype MemberData = {\n    name: string;\n    position: string;\n    company: string;\n    email: string;\n};\n\nconst List = () => {\n    // set pagetitle\n    usePageTitle({\n        title: 'Contacts List',\n        breadCrumbItems: [\n            {\n                path: '/apps/contacts/list',\n                label: 'Contacts',\n            },\n            {\n                path: '/apps/contacts/list',\n                label: 'Contacts List',\n                active: true,\n            },\n        ],\n    });\n\n    const [modal, setModal] = useState<boolean>(false);\n\n    // Show/hide the modal\n    const toggle = () => {\n        setModal(!modal);\n    };\n\n    // form validation schema\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            name: yup.string().required('Please enter name'),\n            position: yup.string().required('Please enter your position'),\n            company: yup.string().required('Please enter your company name'),\n            email: yup.string().required('Please enter Email address').email('Enter valid email'),\n        })\n    );\n    return (\n        <>\n            <Row>\n                <Col xs={12}>\n                    <Card>\n                        <Card.Body>\n                            <Row className=\"justify-content-center\">\n                                <Col md={4}>\n                                    <div className=\"mt-3 mt-md-0\">\n                                        <Button variant=\"success\" className=\"waves-effect waves-light\" onClick={toggle}>\n                                            <i className=\"mdi mdi-plus-circle me-1\"></i>\n                                            Add contact\n                                        </Button>\n                                    </div>\n                                </Col>\n                                <Col md={8}>\n                                    <form className=\"d-flex flex-wrap align-items-center justify-content-sm-end\">\n                                        <label className=\"me-2\">Sort By</label>\n                                        <FormInput type=\"select\" name=\"sort\">\n                                            <option>All</option>\n                                            <option>Name</option>\n                                            <option>Post</option>\n                                            <option>Followers</option>\n                                            <option>Followings</option>\n                                        </FormInput>\n                                        <FormInput\n                                            type=\"search\"\n                                            name=\"search\"\n                                            placeholder=\"Search...\"\n                                            className=\"ms-sm-2\"\n                                        />\n                                    </form>\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n            <Row>\n                {(contacts || []).map((contact, index) => {\n                    return (\n                        <Col xl={4} md={6} key={index.toString()}>\n                            <ContactDetails contact={contact} />\n                        </Col>\n                    );\n                })}\n            </Row>\n            <Modal show={modal} onHide={toggle} centered>\n                <Modal.Header closeButton>\n                    <Modal.Title as=\"h4\">Add Contact</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <VerticalForm<MemberData> onSubmit={() => {}} resolver={schemaResolver} defaultValues={{}}>\n                        <FormInput\n                            label={'Name'}\n                            type=\"text\"\n                            name=\"name\"\n                            placeholder=\"Enter name\"\n                            containerClass={'mb-3'}\n                        />\n\n                        <FormInput\n                            label={'Position'}\n                            type=\"text\"\n                            name=\"position\"\n                            placeholder=\"Enter position\"\n                            containerClass={'mb-3'}\n                        />\n\n                        <FormInput\n                            label={'Company'}\n                            type=\"text\"\n                            name=\"company\"\n                            placeholder=\"Enter company\"\n                            containerClass={'mb-3'}\n                        />\n\n                        <FormInput\n                            label={'Email address'}\n                            type=\"email\"\n                            name=\"email\"\n                            placeholder=\"Enter email\"\n                            containerClass={'mb-3'}\n                        />\n\n                        <Button variant=\"light\" className=\"waves-effect waves-light me-1\" type=\"submit\">\n                            Save\n                        </Button>\n                        <Button variant=\"danger\" className=\"waves-effect waves-light\" onClick={toggle}>\n                            Cancel\n                        </Button>\n                    </VerticalForm>\n                </Modal.Body>\n            </Modal>\n        </>\n    );\n};\n\nexport default List;\n"],"names":["_ref","contact","_jsx","Card","children","_jsxs","Body","className","Dropdown","align","Toggle","as","Menu","Item","src","avatar","alt","shortDesc","name","mobile","email","location","Button","defaultValues","resolver","onSubmit","formClass","methods","useForm","handleSubmit","register","control","formState","errors","noValidate","Array","isArray","map","child","props","React","type","key","PasswordInput","_errors$name","placeholder","refCallback","otherProps","showPassword","setShowPassword","useState","_Fragment","InputGroup","Form","Control","id","ref","r","isInvalid","autoComplete","classNames","onClick","Feedback","TextualInput","_ref2","_errors$name2","endIcon","comp","rows","CheckInput","_ref3","_errors$name3","label","Check","SelectInput","_ref4","_errors$name4","Select","_ref5","labelClassName","containerClass","action","hasEndIcon","undefined","Group","Label","contacts","List","usePageTitle","title","breadCrumbItems","path","active","modal","setModal","toggle","schemaResolver","yupResolver","yup","shape","required","position","company","Row","Col","xs","md","variant","FormInput","index","xl","ContactDetails","toString","Modal","show","onHide","centered","Header","closeButton","Title","VerticalForm"],"sourceRoot":""}