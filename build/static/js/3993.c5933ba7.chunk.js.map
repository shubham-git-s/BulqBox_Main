{"version":3,"file":"static/js/3993.c5933ba7.chunk.js","mappings":"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","sources":["pages/uikit/RangeSlider/index.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport Nouislider from 'nouislider-react';\nimport 'nouislider/distribute/nouislider.css';\n\n// hooks\nimport { usePageTitle } from '../../../hooks';\n\ntype SelectedValsType = {\n    [key: number]: { textValue: number; percent: number };\n};\n\ntype SelectedRangesType = {\n    [key: number]: string;\n};\n\n// RangeSliders\nconst RangeSliders = () => {\n    // set pagetitle\n    usePageTitle({\n        title: 'Range Slider',\n        breadCrumbItems: [\n            {\n                path: '/extended-ui/rangesliders',\n                label: 'Extended UI',\n            },\n            {\n                path: '/extended-ui/rangesliders',\n                label: 'Range Slider',\n                active: true,\n            },\n        ],\n    });\n\n    const [selectedVals, setSelectedVals] = useState<SelectedValsType>({\n        1: { textValue: 20, percent: 20 },\n        2: { textValue: 20, percent: 20 },\n    });\n    const [selectedRanges, setSelectedRanges] = useState<SelectedRangesType>({\n        1: '20-45',\n        2: '20-45',\n    });\n\n    const onSlide = (index: number, value: any[], percent: any) => {\n        let selectedValues = { ...selectedVals };\n        selectedValues[index] = {\n            textValue: value[0].toFixed(2),\n            percent: percent[0].toFixed(2),\n        };\n        setSelectedVals(selectedValues);\n    };\n\n    const onSlide2 = (index: number, value: any[]) => {\n        let selectedRange = { ...selectedRanges };\n        selectedRange[index] = value[0].toFixed(2) + '-' + value[1].toFixed(2);\n        setSelectedRanges(selectedRange);\n    };\n\n    return (\n        <>\n            <Row>\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Single</h4>\n                            <p className=\"text-muted font-14\">Slider with single selecrtor</p>\n\n                            <Nouislider\n                                range={{ min: 0, max: 100 }}\n                                start={[20]}\n                                connect\n                                onSlide={(render, handle, value, un, percent) => onSlide(1, value, percent)}\n                            />\n                            <p className=\"mt-2 mb-0\">\n                                Value:{' '}\n                                {selectedVals ? (\n                                    <span>\n                                        {selectedVals[1]['textValue']}, &nbsp;\n                                        {selectedVals[1]['percent']}%\n                                    </span>\n                                ) : null}\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </Col>\n\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Range</h4>\n                            <p className=\"text-muted font-14\">Slider with range selecrtor</p>\n\n                            <Nouislider\n                                range={{ min: 10, max: 150 }}\n                                start={[20, 45]}\n                                connect\n                                onSlide={(render, handle, value, un, percent) => onSlide2(1, value)}\n                            />\n                            <p className=\"mt-2 mb-0\">\n                                Value: {selectedRanges ? <span>{selectedRanges[1]}</span> : null}\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Slider Step</h4>\n                            <p className=\"text-muted font-14\">Slider with step value</p>\n\n                            <Nouislider\n                                range={{ min: 0, max: 100 }}\n                                start={[20]}\n                                step={10}\n                                connect\n                                onSlide={(render, handle, value, un, percent) => onSlide(2, value, percent)}\n                            />\n                            <p className=\"mt-2 mb-0\">\n                                Value:{' '}\n                                {selectedVals ? (\n                                    <span>\n                                        {selectedVals[2]['textValue']}, &nbsp;\n                                        {selectedVals[2]['percent']}%\n                                    </span>\n                                ) : null}\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </Col>\n\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Range Slider with Steps</h4>\n                            <p className=\"text-muted font-14\">Slider with range selecrtor with fixed step value</p>\n\n                            <Nouislider\n                                range={{ min: 10, max: 150 }}\n                                start={[20, 45]}\n                                step={15}\n                                connect\n                                onSlide={(render, handle, value, un, percent) => onSlide2(2, value)}\n                            />\n                            <p className=\"mt-2 mb-0\">\n                                Value: {selectedRanges ? <span>{selectedRanges[2]}</span> : null}\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default RangeSliders;\n"],"names":["RangeSliders","usePageTitle","title","breadCrumbItems","path","label","active","selectedVals","setSelectedVals","useState","textValue","percent","selectedRanges","setSelectedRanges","onSlide","index","value","selectedValues","toFixed","onSlide2","selectedRange","_jsxs","_Fragment","children","Row","_jsx","Col","xl","Card","Body","className","Nouislider","range","min","max","start","connect","render","handle","un","step"],"sourceRoot":""}