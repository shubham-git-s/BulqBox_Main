{"version":3,"file":"static/js/9313.5f0f87d8.chunk.js","mappings":"4KAWA,MA0CA,EA1CqBA,IAMkB,IAN8C,cACjFC,EAAa,SACbC,EAAQ,SACRC,EAAQ,SACRC,EAAQ,UACRC,GAC6BL,EAI7B,MAAMM,GAAUC,EAAAA,EAAAA,IAAqB,CACjCN,cAAeA,EACfC,cAEE,aACFM,EAAY,SACZC,EAAQ,QACRC,EACAC,WAAW,OAAEC,IACbN,EAEJ,OACIO,EAAAA,EAAAA,KAAA,QAAMT,SAAUI,EAAaJ,GAAWU,UAAWT,EAAWU,YAAU,EAAAZ,SACnEa,MAAMC,QAAQd,GACTA,EAASe,KAAKC,GACHA,EAAMC,OAASD,EAAMC,MAAMC,KAC5BC,EAAAA,cAAoBH,EAAMI,KAAM,IACzB,IACIJ,EAAMC,MACTX,WACAe,IAAKL,EAAMC,MAAMC,KACjBT,SACAF,aAGRS,IAEVhB,GACH,E,8CCvBf,MAAMsB,EAAgBzB,IASC,IAAD0B,EAAA,IATC,KACnBL,EAAI,YACJM,EAAW,YACXC,EAAW,OACXhB,EAAM,QACNF,EAAO,SACPD,EAAQ,UACRK,KACGe,GACU7B,EACb,MAAO8B,EAAcC,IAAmBC,EAAAA,EAAAA,WAAkB,GAE1D,OACIC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA/B,SAAA,EACI8B,EAAAA,EAAAA,MAACE,EAAAA,EAAU,CAACrB,UAAU,OAAMX,SAAA,EACxBU,EAAAA,EAAAA,KAACuB,EAAAA,EAAKC,QAAO,CACTd,KAAMO,EAAe,OAAS,WAC9BH,YAAaA,EACbN,KAAMA,EACNiB,GAAIjB,EACJkB,GAAG,QACHC,IAAMC,IACEb,GAAaA,EAAYa,EAAE,EAEnC3B,UAAWA,EACX4B,aAAW9B,IAAUA,EAAOS,OACvBZ,EAAWA,EAASY,GAAQ,CAAC,EAClCsB,aAActB,KACVQ,KAERhB,EAAAA,EAAAA,KAAA,OACIC,UAAW8B,IAAW,mBAAoB,uBAAwB,CAC9D,gBAAiBd,IAErB,gBAAeA,EAAe,OAAS,QAAQ3B,UAE/CU,EAAAA,EAAAA,KAAA,QACIC,UAAU,eACV+B,QAASA,KACLd,GAAiBD,EAAa,SAM7ClB,GAAUA,EAAOS,IACdR,EAAAA,EAAAA,KAACuB,EAAAA,EAAKC,QAAQS,SAAQ,CAACvB,KAAK,UAAUT,UAAU,UAASX,SACzC,QADyCuB,EACrDd,EAAOS,UAAK,IAAAK,OAAA,EAAZA,EAAwB,UAE5B,OACL,EAKLqB,EAAeC,IAYE,IAADC,EAAA,IAZA,KAClB1B,EAAI,KACJF,EAAI,YACJM,EAAW,QACXuB,EAAO,SACPzC,EAAQ,OACRG,EAAM,KACNuC,EAAI,KACJC,EAAI,UACJtC,EAAS,YACTc,KACGC,GACUmB,EACb,OACInC,EAAAA,EAAAA,KAAAqB,EAAAA,SAAA,CAAA/B,SACc,aAAToB,GAAuB2B,GACpBrC,EAAAA,EAAAA,KAAAqB,EAAAA,SAAA,CAAA/B,UACIU,EAAAA,EAAAA,KAACY,EAAa,CACVJ,KAAMA,EACNM,YAAaA,EACbC,YAAaA,EACbhB,OAAQA,EACRH,SAAUA,EACVK,UAAWA,KACPe,OAIZI,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA/B,SAAA,EACIU,EAAAA,EAAAA,KAACuB,EAAAA,EAAKC,QAAO,CACTd,KAAMA,EACNI,YAAaA,EACbN,KAAMA,EACNkB,GAAIY,EACJb,GAAIjB,EACJmB,IAAMC,IACEb,GAAaA,EAAYa,EAAE,EAEnC3B,UAAWA,EACX4B,aAAW9B,IAAUA,EAAOS,OACvBZ,EAAWA,EAASY,GAAQ,CAAC,EAClC+B,KAAMA,KACFvB,IAGPjB,GAAUA,EAAOS,IACdR,EAAAA,EAAAA,KAACuB,EAAAA,EAAKC,QAAQS,SAAQ,CAACvB,KAAK,UAAUT,UAAU,UAASX,SACzC,QADyC8C,EACrDrC,EAAOS,UAAK,IAAA4B,OAAA,EAAZA,EAAwB,UAE5B,SAGb,EAKLI,EAAaC,IAYI,IAADC,EAAA,IAZF,KAChBhC,EAAI,MACJiC,EAAK,KACLnC,EAAI,YACJM,EAAW,SACXlB,EAAQ,OACRG,EAAM,KACNuC,EAAI,KACJC,EAAI,UACJtC,EAAS,YACTc,KACGC,GACUyB,EACb,OACIrB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA/B,SAAA,EACIU,EAAAA,EAAAA,KAACuB,EAAAA,EAAKqB,MAAK,CACPlC,KAAMA,EACNiC,MAAOA,EACPnC,KAAMA,EACNiB,GAAIjB,EACJmB,IAAMC,IACEb,GAAaA,EAAYa,EAAE,EAEnC3B,UAAWA,EACX4B,aAAW9B,IAAUA,EAAOS,OACvBZ,EAAWA,EAASY,GAAQ,CAAC,KAC9BQ,IAGPjB,GAAUA,EAAOS,IACdR,EAAAA,EAAAA,KAACuB,EAAAA,EAAKC,QAAQS,SAAQ,CAACvB,KAAK,UAAUT,UAAU,UAASX,SACxC,QADwCoD,EACpD3C,EAAOS,UAAK,IAAAkC,OAAA,EAAZA,EAAwB,UAE7B,OACL,EAKLG,EAAcC,IAYG,IAADC,EAAA,IAZD,KACjBrC,EAAI,MACJiC,EAAK,KACLnC,EAAI,YACJM,EAAW,SACXlB,EAAQ,OACRG,EAAM,KACNuC,EAAI,UACJrC,EAAS,SACTX,EAAQ,YACRyB,KACGC,GACU8B,EACb,OACI1B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA/B,SAAA,EACIU,EAAAA,EAAAA,KAACuB,EAAAA,EAAKyB,OAAM,CACRtC,KAAMA,EACNiC,MAAOA,EACPnC,KAAMA,EACNiB,GAAIjB,EACJmB,IAAMC,IACEb,GAAaA,EAAYa,EAAE,EAEnCtC,SAAUA,EACVW,UAAWA,EACX4B,aAAW9B,IAAUA,EAAOS,OACvBZ,EAAWA,EAASY,GAAQ,CAAC,KAC9BQ,IAGPjB,GAAUA,EAAOS,IACdR,EAAAA,EAAAA,KAACuB,EAAAA,EAAKC,QAAQS,SAAQ,CAACvB,KAAK,UAASpB,SAAc,QAAdyD,EAAEhD,EAAOS,UAAK,IAAAuC,OAAA,EAAZA,EAAwB,UAC/D,OACL,EAyGX,EArGkBE,IAiBK,IAjBJ,MACfN,EAAK,KACLjC,EAAI,KACJF,EAAI,YACJM,EAAW,QACXuB,EAAO,SACPzC,EAAQ,OACRG,EAAM,QACNF,EAAO,UACPI,EAAS,eACTiD,EAAc,eACdC,EAAc,YACdpC,EAAW,SACXzB,EAAQ,OACR8D,EAAM,KACNb,KACGvB,GACUiC,EAEb,MAAMX,EAAgB,aAAT5B,EAAsB,WAAsB,WAATA,EAAoB,SAAW,QAEzE2C,OAAyBC,IAAZjB,GAAwBA,EAE3C,OACIrC,EAAAA,EAAAA,KAAAqB,EAAAA,SAAA,CAAA/B,SACc,WAAToB,GACGV,EAAAA,EAAAA,KAAA,SAAOU,KAAMA,EAAMF,KAAMA,KAAWZ,EAAWA,EAASY,GAAQ,CAAC,KAAQQ,KAEzEhB,EAAAA,EAAAA,KAAAqB,EAAAA,SAAA,CAAA/B,SACc,WAAToB,GACGU,EAAAA,EAAAA,MAACG,EAAAA,EAAKgC,MAAK,CAACtD,UAAWkD,EAAe7D,SAAA,CACjCqD,GACGvB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA/B,SAAA,EACIU,EAAAA,EAAAA,KAACuB,EAAAA,EAAKiC,MAAK,CAACvD,UAAWiD,EAAe5D,SAAEqD,IACvCS,GAAUA,KAEf,MAEJpD,EAAAA,EAAAA,KAAC6C,EAAW,CACRnC,KAAMA,EACNF,KAAMA,EACNM,YAAaA,EACbC,YAAaA,EACbhB,OAAQA,EACRH,SAAUA,EACV0C,KAAMA,EACNrC,UAAWA,EACXX,SAAUA,KACN0B,QAIZhB,EAAAA,EAAAA,KAAAqB,EAAAA,SAAA,CAAA/B,SACc,aAAToB,GAAgC,UAATA,GACpBV,EAAAA,EAAAA,KAACuB,EAAAA,EAAKgC,MAAK,CAACtD,UAAWkD,EAAe7D,UAClCU,EAAAA,EAAAA,KAACwC,EAAU,CACP9B,KAAMA,EACNiC,MAAOA,EACPnC,KAAMA,EACNM,YAAaA,EACbC,YAAaA,EACbhB,OAAQA,EACRH,SAAUA,EACV0C,KAAMA,EACNrC,UAAWA,EACXsC,KAAMA,KACFvB,OAIZI,EAAAA,EAAAA,MAACG,EAAAA,EAAKgC,MAAK,CAACtD,UAAWkD,EAAe7D,SAAA,CACjCqD,GACGvB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA/B,SAAA,EACIU,EAAAA,EAAAA,KAACuB,EAAAA,EAAKiC,MAAK,CAACvD,UAAWiD,EAAe5D,SAAEqD,IACvCS,GAAUA,KAEf,MAEJpD,EAAAA,EAAAA,KAACkC,EAAY,CACTxB,KAAMA,EACNF,KAAMA,EACNM,YAAaA,EACbuB,QAASgB,EACTtC,YAAaA,EACbhB,OAAQA,EACRH,SAAUA,EACV0C,KAAMA,EACNrC,UAAWA,EACXsC,KAAMA,KACFvB,YAQjC,C,6QC3SX,MA6CA,EA7CkBT,IACd,MAAMkD,EAAOlD,EAAMkD,MAAQ,CAAC,EAE5B,OACIrC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA/B,SAAA,EACIU,EAAAA,EAAAA,KAAA,QACIC,UAAW8B,IAAW,QAAS,YAAa,CACxC,uBAA0C,WAAlB0B,EAAKC,SAC7B,wBAA2C,SAAlBD,EAAKC,WAC/BpE,SAEFmE,EAAKC,YAEVtC,EAAAA,EAAAA,MAAA,OAAKnB,UAAU,iCAAgCX,SAAA,EAC3CU,EAAAA,EAAAA,KAACuB,EAAAA,EAAKqB,MAAK,CAAC3C,UAAU,gCAA+BX,UACjDU,EAAAA,EAAAA,KAACuB,EAAAA,EAAKqB,MAAMe,MAAK,CAACjD,KAAK,WAAWF,KAAK,YAAYiB,GAAG,iBAE1DzB,EAAAA,EAAAA,KAAA,MAAIC,UAAU,OAAMX,UAChBU,EAAAA,EAAAA,KAAC4D,EAAAA,GAAI,CAACC,GAAG,sBAAsB5D,UAAU,iBAAgBX,SACpDmE,EAAKK,cAKlB1C,EAAAA,EAAAA,MAAA,MAAInB,UAAU,4BAA2BX,SAAA,EACrCU,EAAAA,EAAAA,KAAA,MAAIC,UAAU,mBAAkBX,UAC5BU,EAAAA,EAAAA,KAAC+D,EAAAA,EAAc,CAACC,UAAU,MAAMC,SAASjE,EAAAA,EAAAA,KAACkE,EAAAA,EAAO,CAAA5E,SAAEmE,EAAKU,WAAoB7E,UACxEU,EAAAA,EAAAA,KAAA,OAAKoE,IAAKX,EAAKY,WAAYC,IAAKb,EAAKU,SAAUlE,UAAU,kCAGjED,EAAAA,EAAAA,KAAA,MAAIC,UAAU,mBAAkBX,UAC5BU,EAAAA,EAAAA,KAAC+D,EAAAA,EAAc,CAACC,UAAU,MAAMC,SAASjE,EAAAA,EAAAA,KAACkE,EAAAA,EAAO,CAAA5E,SAAEmE,EAAKA,KAAO,WAAoBnE,UAC/EU,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mCAGrBD,EAAAA,EAAAA,KAAA,MAAIC,UAAU,mBAAkBX,UAC5BU,EAAAA,EAAAA,KAAC+D,EAAAA,EAAc,CAACC,UAAU,MAAMC,SAASjE,EAAAA,EAAAA,KAACkE,EAAAA,EAAO,CAAA5E,SAAEmE,EAAKc,QAAU,cAAuBjF,UACrFU,EAAAA,EAAAA,KAAA,KAAGC,UAAU,qCAI1B,E,+GCtCX,MAAMuE,EAA2B,CAC7B,CACI/C,GAAI,EACJqC,MAAO,2BACPW,OAAQ,WACRf,SAAU,SACVW,WAAYK,EACZP,SAAU,oBACVV,KAAM,EACNc,QAAS,GAEb,CACI9C,GAAI,EACJqC,MAAO,sCACPW,OAAQ,WACRf,SAAU,OACVW,WAAYM,EACZR,SAAU,oBACVV,KAAM,EACNc,QAAS,GAEb,CACI9C,GAAI,EACJqC,MAAO,2BACPW,OAAQ,WACRJ,WAAYO,EACZT,SAAU,mBACVV,KAAM,EACNc,QAAS,GAEb,CACI9C,GAAI,EACJqC,MAAO,6CACPW,OAAQ,WACRf,SAAU,SACVW,WAAYQ,EACZV,SAAU,qBACVV,KAAM,EACNc,QAAS,GAEb,CACI9C,GAAI,EACJqC,MAAO,wBACPW,OAAQ,aACRf,SAAU,SACVW,WAAYS,EACZX,SAAU,oBACVV,KAAM,EACNc,QAAS,GAEb,CACI9C,GAAI,EACJqC,MAAO,4BACPW,OAAQ,aACRf,SAAU,OACVW,WAAYU,EACZZ,SAAU,sBACVV,KAAM,EACNc,QAAS,GAEb,CACI9C,GAAI,EACJqC,MAAO,0BACPW,OAAQ,aACRJ,WAAYW,EACZb,SAAU,mBACVV,KAAM,EACNc,QAAS,GAEb,CACI9C,GAAI,EACJqC,MAAO,0BACPW,OAAQ,YACRf,SAAU,SACVW,WAAYY,EACZd,SAAU,oBACVV,KAAM,EACNc,QAAS,GAEb,CACI9C,GAAI,EACJqC,MAAO,sCACPW,OAAQ,YACRf,SAAU,OACVW,WAAYa,EACZf,SAAU,oBACVV,KAAM,EACNc,QAAS,GAEb,CACI9C,GAAI,GACJqC,MAAO,2BACPW,OAAQ,YACRJ,WAAYc,EACZhB,SAAU,kBACVV,KAAM,EACNc,QAAS,GAEb,CACI9C,GAAI,GACJqC,MAAO,6CACPW,OAAQ,YACRf,SAAU,SACVW,WAAYS,EACZX,SAAU,mBACVV,KAAM,EACNc,QAAS,ICuVjB,EAhbea,MAEXC,EAAAA,EAAAA,IAAa,CACTvB,MAAO,eACPwB,gBAAiB,CACb,CACIC,KAAM,oBACN5C,MAAO,SAEX,CACI4C,KAAM,oBACN5C,MAAO,eACP6C,QAAQ,MAKpB,MAAOC,EAAOC,IAAYvE,EAAAA,EAAAA,UAAe,CACrCwE,cAAenB,EAAMoB,QAAQC,GAAmB,aAAbA,EAAEpB,SACrCqB,gBAAiBtB,EAAMoB,QAAQC,GAAmB,eAAbA,EAAEpB,SACvCsB,eAAgBvB,EAAMoB,QAAQC,GAAmB,cAAbA,EAAEpB,YAEnCuB,EAAYC,IAAiB9E,EAAAA,EAAAA,UAAiBqD,EAAM0B,SACpDC,EAAcC,IAAmBjF,EAAAA,EAAAA,WAAkB,IACnDkF,EAAgBC,IAAqBnF,EAAAA,EAAAA,UAAc,MAKpDoF,GAAiBC,EAAAA,EAAAA,GACnBC,EAAAA,KAAaC,MAAM,CACf5C,MAAO2C,EAAAA,KAAaE,WACpBxC,SAAUsC,EAAAA,KAAaE,cAOzBlH,GAAUC,EAAAA,EAAAA,IAAQ,CAAEL,SAAUkH,KAC9B,aACF5G,EAAY,SACZC,EAAQ,QACRC,EAAO,MACP+G,EACA9G,WAAW,OAAEC,IACbN,EAKEoH,EAAqBA,KACvBT,GAAiBU,IAAeA,GAAU,EAQxCC,EAAUA,CAACtC,EAAgBuC,KAC7BV,EAAkB,CACdW,QAAS,IAAIC,KACb7C,WAAY8C,EACZ1D,KAAM,EACNc,QAAS,EACTE,OAAQA,EACRuC,MAAOA,IAEXZ,GAAgB,EAAK,EAmCnBgB,EAAW3F,IACb,MAAM4F,EAAqB,IAAK5B,GAEhC,OADwB4B,EAAc5F,IAAO4F,EAAc5F,EAC1C,EAqDrB,OACIL,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA/B,SAAA,EACIU,EAAAA,EAAAA,KAACsH,EAAAA,EAAG,CAAAhI,UACA8B,EAAAA,EAAAA,MAACmG,EAAAA,GAAe,CAACC,UAlDVC,IACf,MAAM,OAAEC,EAAM,YAAEC,GAAgBF,EAGhC,GAAKE,EAGL,GAAID,EAAOE,cAAgBD,EAAYC,YAAa,CAChD,MAAMC,EAhDEC,EAACC,EAAaC,EAAoBC,KAC9C,MAAMR,EAAStH,MAAM+H,KAAKH,IACnBI,GAAWV,EAAOW,OAAOJ,EAAY,GAG5C,OAFAP,EAAOW,OAAOH,EAAU,EAAGE,GAEpBV,CAAM,EA2CKK,CAAQV,EAAQM,EAAOE,aAAcF,EAAOW,MAAOV,EAAYU,OAC7E,IAAIC,EAAkB,IAAK7C,GAC3B6C,EAAWZ,EAAOE,aAAeC,EACjCnC,EAAS4C,EACb,KAAO,CACH,MAAMb,EA1CDc,EACTb,EACAC,EACAa,EACAC,KAEA,MAAMC,EAAcvI,MAAM+H,KAAKR,GACzBiB,EAAYxI,MAAM+H,KAAKP,IACtBQ,GAAWO,EAAYN,OAAOI,EAAgBH,MAAO,GAC5DM,EAAUP,OAAOK,EAAqBJ,MAAO,EAAGF,GAChD,MAAMV,EAAc,CAAC,EAIrB,OAHAA,EAAOe,EAAgBZ,aAAec,EACtCjB,EAAOgB,EAAqBb,aAAee,EAEpClB,CAAM,EA4BMc,CAAKnB,EAAQM,EAAOE,aAAcR,EAAQO,EAAYC,aAAcF,EAAQC,GACrFW,EAAa,IAAK7C,KAAUgC,GAClC/B,EAAS4C,EACb,GAkC8ChJ,SAAA,EAElCU,EAAAA,EAAAA,KAAC4I,EAAAA,GAAS,CAAChB,YAAY,gBAAetI,SACjCA,CAACuJ,EAAUC,KACR9I,EAAAA,EAAAA,KAAC+I,EAAAA,EAAG,CAACC,GAAI,EAAGrH,IAAKkH,EAASI,SAAS3J,UAC/BU,EAAAA,EAAAA,KAACkJ,EAAAA,EAAI,CAAA5J,UACD8B,EAAAA,EAAAA,MAAC8H,EAAAA,EAAKC,KAAI,CAAA7J,SAAA,EACN8B,EAAAA,EAAAA,MAACgI,EAAAA,EAAQ,CAACnJ,UAAU,YAAYoJ,MAAM,MAAK/J,SAAA,EACvCU,EAAAA,EAAAA,KAACoJ,EAAAA,EAASE,OAAM,CAAC5H,GAAG,IAAIzB,UAAU,2BAA0BX,UACxDU,EAAAA,EAAAA,KAAA,KAAGC,UAAU,6BAEjBmB,EAAAA,EAAAA,MAACgI,EAAAA,EAASG,KAAI,CAAAjK,SAAA,EACVU,EAAAA,EAAAA,KAACoJ,EAAAA,EAASI,KAAI,CAAAlK,SAAC,YACfU,EAAAA,EAAAA,KAACoJ,EAAAA,EAASI,KAAI,CAAAlK,SAAC,sBACfU,EAAAA,EAAAA,KAACoJ,EAAAA,EAASI,KAAI,CAAAlK,SAAC,oBACfU,EAAAA,EAAAA,KAACoJ,EAAAA,EAASI,KAAI,CAAAlK,SAAC,0BAIvBU,EAAAA,EAAAA,KAAA,MAAIC,UAAU,sCAAqCX,SAAC,aACpB,IAA/BmG,EAAME,cAAcO,SACjBlG,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mCAAkCX,SAAC,cAGpD8B,EAAAA,EAAAA,MAAA,MAAInB,UAAU,uCAAuCwB,GAAG,WAAUnC,SAAA,EAC5DmG,EAAME,eAAiB,IAAItF,KAAI,CAACoJ,EAAMpB,KACpCrI,EAAAA,EAAAA,KAAC0J,EAAAA,GAAS,CAAeC,YAAaF,EAAKhI,GAAK,GAAI4G,MAAOA,EAAM/I,SAC5DA,CAACuJ,EAAUC,KACR9I,EAAAA,EAAAA,KAAA,MACI2B,IAAKkH,EAASI,YACVJ,EAASe,kBACTf,EAASgB,gBAAevK,UAE5BU,EAAAA,EAAAA,KAAC8J,EAAQ,CAACrG,KAAMgG,OAPZA,EAAKhI,MAYxBoH,EAAS/H,gBAEdd,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBX,UAC7B8B,EAAAA,EAAAA,MAACwC,EAAAA,GAAI,CACDC,GAAG,IACH5D,UAAU,2CACV+B,QAASA,IAAM+E,EAAQ,UAAW,iBAAiBzH,SAAA,EAEnDU,EAAAA,EAAAA,KAAA,KAAGC,UAAU,iBAAmB,0BAU5DD,EAAAA,EAAAA,KAAC4I,EAAAA,GAAS,CAAChB,YAAY,kBAAiBtI,SACnCA,CAACuJ,EAAUC,KACR9I,EAAAA,EAAAA,KAAC+I,EAAAA,EAAG,CAACC,GAAI,EAAGrH,IAAKkH,EAASI,SAAS3J,UAC/BU,EAAAA,EAAAA,KAACkJ,EAAAA,EAAI,CAAA5J,UACD8B,EAAAA,EAAAA,MAAC8H,EAAAA,EAAKC,KAAI,CAAA7J,SAAA,EACN8B,EAAAA,EAAAA,MAACgI,EAAAA,EAAQ,CAACnJ,UAAU,YAAYoJ,MAAM,MAAK/J,SAAA,EACvCU,EAAAA,EAAAA,KAACoJ,EAAAA,EAASE,OAAM,CAAC5H,GAAG,IAAIzB,UAAU,2BAA0BX,UACxDU,EAAAA,EAAAA,KAAA,KAAGC,UAAU,6BAEjBmB,EAAAA,EAAAA,MAACgI,EAAAA,EAASG,KAAI,CAAAjK,SAAA,EACVU,EAAAA,EAAAA,KAACoJ,EAAAA,EAASI,KAAI,CAAAlK,SAAC,YACfU,EAAAA,EAAAA,KAACoJ,EAAAA,EAASI,KAAI,CAAAlK,SAAC,sBACfU,EAAAA,EAAAA,KAACoJ,EAAAA,EAASI,KAAI,CAAAlK,SAAC,oBACfU,EAAAA,EAAAA,KAACoJ,EAAAA,EAASI,KAAI,CAAAlK,SAAC,0BAIvBU,EAAAA,EAAAA,KAAA,MAAIC,UAAU,sCAAqCX,SAAC,gBAElB,IAAjCmG,EAAMK,gBAAgBI,SACnBlG,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mCAAkCX,SAAC,cAGpD8B,EAAAA,EAAAA,MAAA,MAAInB,UAAU,uCAAuCwB,GAAG,aAAYnC,SAAA,EAC9DmG,EAAMK,iBAAmB,IAAIzF,KAAI,CAACoJ,EAAMpB,KACtCrI,EAAAA,EAAAA,KAAC0J,EAAAA,GAAS,CAAeC,YAAaF,EAAKhI,GAAK,GAAI4G,MAAOA,EAAM/I,SAC5DA,CAACuJ,EAAUC,KACR9I,EAAAA,EAAAA,KAAA,MACI2B,IAAKkH,EAASI,YACVJ,EAASe,kBACTf,EAASgB,gBAAevK,UAE5BU,EAAAA,EAAAA,KAAC8J,EAAQ,CAACrG,KAAMgG,OAPZA,EAAKhI,MAYxBoH,EAAS/H,gBAEdd,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBX,UAC7B8B,EAAAA,EAAAA,MAACwC,EAAAA,GAAI,CACDC,GAAG,IACH5D,UAAU,2CACV+B,QAASA,IAAM+E,EAAQ,aAAc,mBAAmBzH,SAAA,EAExDU,EAAAA,EAAAA,KAAA,KAAGC,UAAU,iBAAmB,0BAU5DD,EAAAA,EAAAA,KAAC4I,EAAAA,GAAS,CAAChB,YAAY,iBAAgBtI,SAClCA,CAACuJ,EAAUC,KACR9I,EAAAA,EAAAA,KAAC+I,EAAAA,EAAG,CAACC,GAAI,EAAGrH,IAAKkH,EAASI,SAAS3J,UAC/BU,EAAAA,EAAAA,KAACkJ,EAAAA,EAAI,CAAA5J,UACD8B,EAAAA,EAAAA,MAAC8H,EAAAA,EAAKC,KAAI,CAAA7J,SAAA,EACN8B,EAAAA,EAAAA,MAACgI,EAAAA,EAAQ,CAACnJ,UAAU,YAAYoJ,MAAM,MAAK/J,SAAA,EACvCU,EAAAA,EAAAA,KAACoJ,EAAAA,EAASE,OAAM,CAAC5H,GAAG,IAAIzB,UAAU,2BAA0BX,UACxDU,EAAAA,EAAAA,KAAA,KAAGC,UAAU,6BAEjBmB,EAAAA,EAAAA,MAACgI,EAAAA,EAASG,KAAI,CAAAjK,SAAA,EACVU,EAAAA,EAAAA,KAACoJ,EAAAA,EAASI,KAAI,CAAAlK,SAAC,YACfU,EAAAA,EAAAA,KAACoJ,EAAAA,EAASI,KAAI,CAAAlK,SAAC,sBACfU,EAAAA,EAAAA,KAACoJ,EAAAA,EAASI,KAAI,CAAAlK,SAAC,oBACfU,EAAAA,EAAAA,KAACoJ,EAAAA,EAASI,KAAI,CAAAlK,SAAC,0BAIvBU,EAAAA,EAAAA,KAAA,MAAIC,UAAU,sCAAqCX,SAAC,cACnB,IAAhCmG,EAAMM,eAAeG,SAClBlG,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mCAAkCX,SAAC,cAGpD8B,EAAAA,EAAAA,MAAA,MAAInB,UAAU,uCAAuCwB,GAAG,OAAMnC,SAAA,EACxDmG,EAAMM,gBAAkB,IAAI1F,KAAI,CAACoJ,EAAMpB,KACrCrI,EAAAA,EAAAA,KAAC0J,EAAAA,GAAS,CAAeC,YAAaF,EAAKhI,GAAK,GAAI4G,MAAOA,EAAM/I,SAC5DA,CAACuJ,EAAUC,KACR9I,EAAAA,EAAAA,KAAA,MACI2B,IAAKkH,EAASI,YACVJ,EAASe,kBACTf,EAASgB,gBAAevK,UAE5BU,EAAAA,EAAAA,KAAC8J,EAAQ,CAACrG,KAAMgG,OAPZA,EAAKhI,MAYxBoH,EAAS/H,gBAEdd,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBX,UAC7B8B,EAAAA,EAAAA,MAACwC,EAAAA,GAAI,CACDC,GAAG,IACH5D,UAAU,2CACV+B,QAASA,IAAM+E,EAAQ,OAAQ,kBAAkBzH,SAAA,EAEjDU,EAAAA,EAAAA,KAAA,KAAGC,UAAU,iBAAmB,8BAanEoG,IACGjF,EAAAA,EAAAA,MAAC2I,EAAAA,EAAK,CAACC,KAAM7D,EAAc8D,OAAQpD,EAAoBqD,UAAQ,EAAA5K,SAAA,EAC3DU,EAAAA,EAAAA,KAAC+J,EAAAA,EAAMI,OAAM,CAACC,aAAW,EAAA9K,UACrBU,EAAAA,EAAAA,KAAA,MAAIC,UAAU,cAAaX,SAAC,oBAEhCU,EAAAA,EAAAA,KAAC+J,EAAAA,EAAMZ,KAAI,CAAA7J,UACP8B,EAAAA,EAAAA,MAAA,QAAM7B,SAAUI,GAzMb0K,IACnB,MAAMC,EAAW,CACbxG,MAAOuG,EAAc,MACrB3G,SAAU2G,EAAiB,SAC3BlG,SAAUkG,EAAiB,UAGzBtD,EAAU,IACTV,KACAiE,EACH7I,GAAIuE,EAAa,GAGrB,IAAIqB,EAAqB,IAAK5B,GAC1BjB,EAAQ,IAAI4C,EAAQf,EAAeW,OAAQD,GAC/CM,EAAchB,EAAeW,OAAS,IAAIxC,GAE1CkB,EAAS2B,GACTjB,GAAgB,GAChBH,EAAcD,EAAa,GAE3BY,GAAO,IAoLsD3G,UAAU,OAAMX,SAAA,EACzDU,EAAAA,EAAAA,KAACuK,EAAAA,EAAS,CACN/J,KAAK,QACLmC,MAAM,QACN7B,YAAY,cACZJ,KAAK,OACLyC,eAAe,OACflD,UAAU,eACVL,SAAUA,EAEVG,OAAQA,EACRF,QAASA,GAFL,UAKRuB,EAAAA,EAAAA,MAACkG,EAAAA,EAAG,CAAAhI,SAAA,EACAU,EAAAA,EAAAA,KAAC+I,EAAAA,EAAG,CAACyB,GAAI,EAAElL,UACPU,EAAAA,EAAAA,KAACuK,EAAAA,EAAS,CACN/J,KAAK,WACLmC,MAAM,YACN7B,YAAY,aACZJ,KAAK,OACLyC,eAAe,OACflD,UAAU,eACVL,SAAUA,EAEVG,OAAQA,EACRF,QAASA,GAFL,eAKZG,EAAAA,EAAAA,KAAC+I,EAAAA,EAAG,CAACyB,GAAI,EAAElL,UACP8B,EAAAA,EAAAA,MAACmJ,EAAAA,EAAS,CACN/J,KAAK,WACLmC,MAAM,WACNjC,KAAK,SACLyC,eAAe,OACflD,UAAU,cACVL,SAAUA,EAEVG,OAAQA,EACRF,QAASA,EAAQP,SAAA,EAEjBU,EAAAA,EAAAA,KAAA,UAAQyK,MAAM,GAAEnL,SAAC,YACjBU,EAAAA,EAAAA,KAAA,UAAQyK,MAAM,SAAQnL,SAAC,YACvBU,EAAAA,EAAAA,KAAA,UAAQyK,MAAM,OAAMnL,SAAC,WANjB,kBAWhB8B,EAAAA,EAAAA,MAACkG,EAAAA,EAAG,CAAAhI,SAAA,EACAU,EAAAA,EAAAA,KAAC+I,EAAAA,EAAG,CAACyB,GAAI,EAAElL,UACPU,EAAAA,EAAAA,KAACuK,EAAAA,EAAS,CACN/J,KAAK,YACLmC,MAAM,aACN7B,YAAY,aACZJ,KAAK,OACLyC,eAAe,OACflD,UAAU,eACVL,SAAUA,EAEVG,OAAQA,EACRF,QAASA,GAFL,gBAKZG,EAAAA,EAAAA,KAAC+I,EAAAA,EAAG,CAACyB,GAAI,EAAElL,UACPU,EAAAA,EAAAA,KAACuK,EAAAA,EAAS,CACN/J,KAAK,UACLmC,MAAM,WACN7B,YAAY,aACZJ,KAAK,OACLyC,eAAe,OACflD,UAAU,eACVL,SAAUA,EAEVG,OAAQA,EACRF,QAASA,GAFL,iBAOhBuB,EAAAA,EAAAA,MAAA,OAAKnB,UAAU,aAAYX,SAAA,EACvBU,EAAAA,EAAAA,KAAC0K,EAAAA,EAAM,CAACC,QAAQ,UAAUjK,KAAK,SAAQpB,SAAC,UAGxCU,EAAAA,EAAAA,KAAC0K,EAAAA,EAAM,CAACC,QAAQ,SAAS1K,UAAU,OAAO+B,QAAS6E,EAAmBvH,SAAC,wBAQ5F,C","sources":["components/form/VerticalForm.tsx","components/form/FormInput.tsx","pages/apps/Tasks/Board/Task.tsx","pages/apps/Tasks/Board/data.ts","pages/apps/Tasks/Board/index.tsx"],"sourcesContent":["import React from 'react';\nimport { useForm, Resolver, SubmitHandler, UnpackNestedValue, DeepPartial, FieldValues, DefaultValues } from 'react-hook-form';\n\ntype VerticalFromProps<TFormValues extends FieldValues> = {\n    defaultValues?: UnpackNestedValue<DeepPartial<TFormValues>>;\n    resolver?: Resolver<TFormValues>;\n    children?: React.ReactNode;\n    onSubmit: SubmitHandler<TFormValues>;\n    formClass?: string;\n};\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({\n        defaultValues: defaultValues as DefaultValues<TFormValues>,\n        resolver,\n    });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","import { useState, InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport { FieldErrors, Control } from 'react-hook-form';\n\ntype FormInputProps = InputHTMLAttributes<HTMLInputElement> & {\n    endIcon?: boolean;\n    label?: string;\n    type?: string;\n    name: string;\n    comp?: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    textClassName?: string;\n    refCallback?: any;\n    action?: React.ReactNode;\n    rows?: number;\n};\n\n/* Password Input with addons */\nconst PasswordInput = ({\n    name,\n    placeholder,\n    refCallback,\n    errors,\n    control,\n    register,\n    className,\n    ...otherProps\n}: FormInputProps) => {\n    const [showPassword, setShowPassword] = useState<boolean>(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                    {...otherProps}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}\n                >\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}\n                    ></span>\n                </div>\n            </InputGroup>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                   {errors[name]?.['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            {type === 'password' && endIcon ? (\n                <>\n                    <PasswordInput\n                        name={name}\n                        placeholder={placeholder}\n                        refCallback={refCallback}\n                        errors={errors!}\n                        register={register}\n                        className={className}\n                        {...otherProps}\n                    />\n                </>\n            ) : (\n                <>\n                    <Form.Control\n                        type={type}\n                        placeholder={placeholder}\n                        name={name}\n                        as={comp}\n                        id={name}\n                        ref={(r: HTMLInputElement) => {\n                            if (refCallback) refCallback(r);\n                        }}\n                        className={className}\n                        isInvalid={errors && errors[name] ? true : false}\n                        {...(register ? register(name) : {})}\n                        rows={rows}\n                        {...otherProps}\n                    ></Form.Control>\n\n                    {errors && errors[name] ? (\n                        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                           {errors[name]?.['message']}\n                        </Form.Control.Feedback>\n                    ) : null}\n                </>\n            )}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]?.['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    className,\n    children,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                children={children}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]?.['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    const hasEndIcon = endIcon !== undefined ? endIcon : true;\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n\n                            <SelectInput\n                                type={type}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                children={children}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : (\n                        <>\n                            {type === 'checkbox' || type === 'radio' ? (\n                                <Form.Group className={containerClass}>\n                                    <CheckInput\n                                        type={type}\n                                        label={label}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            ) : (\n                                <Form.Group className={containerClass}>\n                                    {label ? (\n                                        <>\n                                            <Form.Label className={labelClassName}>{label}</Form.Label>\n                                            {action && action}\n                                        </>\n                                    ) : null}\n\n                                    <TextualInput\n                                        type={type}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        endIcon={hasEndIcon}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","import classNames from 'classnames';\nimport { Form, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\n// types\nimport { KanbanBoardTask } from './types';\n\ntype TaskItemProps = {\n    task: KanbanBoardTask;\n};\n\n// task item\nconst TaskItem = (props: TaskItemProps) => {\n    const task = props.task || {};\n\n    return (\n        <>\n            <span\n                className={classNames('badge', 'float-end', {\n                    'bg-danger text-white': task.priority === 'Urgent',\n                    'bg-warning text-white': task.priority === 'High',\n                })}\n            >\n                {task.priority}\n            </span>\n            <div className=\"d-flex align-items-center mb-1\">\n                <Form.Check className=\"form-check form-check-success\">\n                    <Form.Check.Input type=\"checkbox\" name=\"taskCheck\" id=\"TaskCheck\" />\n                </Form.Check>\n                <h5 className=\"my-0\">\n                    <Link to=\"/apps/tasks/details\" className=\"text-dark ms-1\">\n                        {task.title}\n                    </Link>\n                </h5>\n            </div>\n\n            <ul className=\"list-inline kanban-detail\">\n                <li className=\"list-inline-item\">\n                    <OverlayTrigger placement=\"top\" overlay={<Tooltip>{task.userName}</Tooltip>}>\n                        <img src={task.userAvatar} alt={task.userName} className=\"avatar-sm rounded-circle\" />\n                    </OverlayTrigger>\n                </li>\n                <li className=\"list-inline-item\">\n                    <OverlayTrigger placement=\"top\" overlay={<Tooltip>{task.task + ' Tasks'}</Tooltip>}>\n                        <i className=\"mdi mdi-format-align-left\"></i>\n                    </OverlayTrigger>\n                </li>\n                <li className=\"list-inline-item\">\n                    <OverlayTrigger placement=\"top\" overlay={<Tooltip>{task.comment + ' Comments'}</Tooltip>}>\n                        <i className=\"mdi mdi-comment-outline\"></i>\n                    </OverlayTrigger>\n                </li>\n            </ul>\n        </>\n    );\n};\n\nexport default TaskItem;\n","// types\nimport { KanbanBoardTask } from './types';\n\n// images\nimport avatar1 from '../../../../assets/images/users/user-1.jpg';\nimport avatar2 from '../../../../assets/images/users/user-2.jpg';\nimport avatar3 from '../../../../assets/images/users/user-3.jpg';\nimport avatar4 from '../../../../assets/images/users/user-4.jpg';\nimport avatar5 from '../../../../assets/images/users/user-5.jpg';\nimport avatar6 from '../../../../assets/images/users/user-6.jpg';\nimport avatar7 from '../../../../assets/images/users/user-7.jpg';\nimport avatar8 from '../../../../assets/images/users/user-8.jpg';\nimport avatar9 from '../../../../assets/images/users/user-9.jpg';\nimport avatar10 from '../../../../assets/images/users/user-10.jpg';\n\nconst tasks: KanbanBoardTask[] = [\n    {\n        id: 1,\n        title: 'Improve animation loader',\n        status: 'Upcoming',\n        priority: 'Urgent',\n        userAvatar: avatar1,\n        userName: 'Latasha B. Seibel',\n        task: 5,\n        comment: 3,\n    },\n    {\n        id: 2,\n        title: 'Write a release note for Admin v1.5',\n        status: 'Upcoming',\n        priority: 'High',\n        userAvatar: avatar2,\n        userName: 'Janie R. Pinheiro',\n        task: 2,\n        comment: 4,\n    },\n    {\n        id: 3,\n        title: 'Invite user to a project',\n        status: 'Upcoming',\n        userAvatar: avatar3,\n        userName: 'Brian M. Behrens',\n        task: 9,\n        comment: 5,\n    },\n    {\n        id: 4,\n        title: 'Code HTML email template for welcome email',\n        status: 'Upcoming',\n        priority: 'Urgent',\n        userAvatar: avatar4,\n        userName: 'Keith S. Lindstrom',\n        task: 6,\n        comment: 9,\n    },\n    {\n        id: 5,\n        title: 'File Uploads on Cards',\n        status: 'Inprogress',\n        priority: 'Urgent',\n        userAvatar: avatar5,\n        userName: 'Russell H. Benson',\n        task: 2,\n        comment: 4,\n    },\n    {\n        id: 6,\n        title: 'Enable analytics tracking',\n        status: 'Inprogress',\n        priority: 'High',\n        userAvatar: avatar6,\n        userName: 'Jacquelyn R. Oleary',\n        task: 5,\n        comment: 3,\n    },\n    {\n        id: 7,\n        title: 'Improve animation order',\n        status: 'Inprogress',\n        userAvatar: avatar7,\n        userName: 'John A. Sherrill',\n        task: 8,\n        comment: 6,\n    },\n    {\n        id: 8,\n        title: 'Improve animation order',\n        status: 'Completed',\n        priority: 'Urgent',\n        userAvatar: avatar8,\n        userName: 'Jamie D. Schwartz',\n        task: 1,\n        comment: 3,\n    },\n    {\n        id: 9,\n        title: 'Write a release note for Admin v1.5',\n        status: 'Completed',\n        priority: 'High',\n        userAvatar: avatar9,\n        userName: 'Russell B. Clancy',\n        task: 7,\n        comment: 3,\n    },\n    {\n        id: 10,\n        title: 'Invite user to a project',\n        status: 'Completed',\n        userAvatar: avatar10,\n        userName: 'Robert B. Brown',\n        task: 6,\n        comment: 2,\n    },\n    {\n        id: 11,\n        title: 'Code HTML email template for welcome email',\n        status: 'Completed',\n        priority: 'Urgent',\n        userAvatar: avatar5,\n        userName: 'Maria K. Trevino',\n        task: 3,\n        comment: 5,\n    },\n];\n\nexport { tasks };\n","import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Card, Dropdown, Modal, Button } from 'react-bootstrap';\nimport { Draggable, Droppable, DragDropContext, DropResult } from 'react-beautiful-dnd';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n// hooks\nimport { usePageTitle } from '../../../../hooks';\n\n// component\nimport { FormInput } from '../../../../components/form';\n\nimport TaskItem from './Task';\n\n// types\nimport { KanbanBoardTask } from './types';\n\n// dummy data\nimport { tasks } from './data';\n\n// images\nimport defaultAvatar from '../../../../assets/images/users/user-1.jpg';\n\ntype task = {\n    upcomingTasks: KanbanBoardTask[];\n    inprogressTasks: KanbanBoardTask[];\n    completedTasks: KanbanBoardTask[];\n};\n\n// kanban\nconst Kanban = () => {\n    // set pagetitle\n    usePageTitle({\n        title: 'Kanban Board',\n        breadCrumbItems: [\n            {\n                path: 'apps/tasks/kanban',\n                label: 'Tasks',\n            },\n            {\n                path: 'apps/tasks/kanban',\n                label: 'Kanban Board',\n                active: true,\n            },\n        ],\n    });\n\n    const [state, setState] = useState<task>({\n        upcomingTasks: tasks.filter((t) => t.status === 'Upcoming'),\n        inprogressTasks: tasks.filter((t) => t.status === 'Inprogress'),\n        completedTasks: tasks.filter((t) => t.status === 'Completed'),\n    });\n    const [totalTasks, setTotalTasks] = useState<number>(tasks.length);\n    const [newTaskModal, setNewTaskModal] = useState<boolean>(false);\n    const [newTaskDetails, setNewTaskDetails] = useState<any>(null);\n\n    /*\n     * Form validation schema\n     */\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            title: yup.string().required(),\n            userName: yup.string().required(),\n        })\n    );\n\n    /*\n     * Form methods\n     */\n    const methods = useForm({ resolver: schemaResolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        reset,\n        formState: { errors },\n    } = methods;\n\n    /**\n     * Toggles the new task modal\n     */\n    const toggleNewTaskModal = () => {\n        setNewTaskModal((prevstate) => !prevstate);\n    };\n\n    /**\n     * Creates new empty task with given status\n     * @param status\n     * @param queue\n     */\n    const newTask = (status: string, queue: string) => {\n        setNewTaskDetails({\n            dueDate: new Date(),\n            userAvatar: defaultAvatar,\n            task: 3,\n            comment: 5,\n            status: status,\n            queue: queue,\n        });\n        setNewTaskModal(true);\n    };\n\n    // a little function to help us with reordering the result\n    const reorder = (list: any[], startIndex: number, endIndex: number) => {\n        const result = Array.from(list);\n        const [removed] = result.splice(startIndex, 1);\n        result.splice(endIndex, 0, removed);\n\n        return result;\n    };\n\n    /**\n     * Moves an item from one list to another list.\n     */\n    const move = (\n        source: Iterable<unknown> | ArrayLike<unknown>,\n        destination: Iterable<unknown> | ArrayLike<unknown>,\n        droppableSource: { index: number; droppableId: string | number },\n        droppableDestination: { index: number; droppableId: string | number }\n    ) => {\n        const sourceClone = Array.from(source);\n        const destClone = Array.from(destination);\n        const [removed] = sourceClone.splice(droppableSource.index, 1);\n        destClone.splice(droppableDestination.index, 0, removed);\n        const result: any = {};\n        result[droppableSource.droppableId] = sourceClone;\n        result[droppableDestination.droppableId] = destClone;\n\n        return result;\n    };\n\n    /**\n     * Gets the list\n     */\n    const getList = (id: string) => {\n        const modifiedState: any = { ...state };\n        const stateTasks: any = modifiedState[id] && modifiedState[id];\n        return stateTasks;\n    };\n\n    /**\n     * On drag end\n     */\n    const onDragEnd = (result: DropResult) => {\n        const { source, destination } = result;\n\n        // dropped outside the list\n        if (!destination) {\n            return;\n        }\n        if (source.droppableId === destination.droppableId) {\n            const items = reorder(getList(source.droppableId), source.index, destination.index);\n            let localState: any = { ...state };\n            localState[source.droppableId] = items;\n            setState(localState);\n        } else {\n            const result = move(getList(source.droppableId), getList(destination.droppableId), source, destination);\n            const localState = { ...state, ...result };\n            setState(localState);\n        }\n    };\n\n    /**\n     * Handles the new task form submission\n     */\n\n    const handleNewTask = (values: any) => {\n        const formData = {\n            title: values['title'],\n            priority: values['priority'],\n            userName: values['userName'],\n        };\n\n        const newTask = {\n            ...newTaskDetails,\n            ...formData,\n            id: totalTasks + 1,\n        };\n\n        let modifiedState: any = { ...state };\n        let tasks = [...getList(newTaskDetails.queue), newTask];\n        modifiedState[newTaskDetails.queue] = [...tasks];\n\n        setState(modifiedState);\n        setNewTaskModal(false);\n        setTotalTasks(totalTasks + 1);\n        // reset the form after submission\n        reset();\n    };\n\n    return (\n        <>\n            <Row>\n                <DragDropContext onDragEnd={onDragEnd}>\n                    {/* todo */}\n                    <Droppable droppableId=\"upcomingTasks\">\n                        {(provided, snapshot) => (\n                            <Col lg={4} ref={provided.innerRef}>\n                                <Card>\n                                    <Card.Body>\n                                        <Dropdown className=\"float-end\" align=\"end\">\n                                            <Dropdown.Toggle as=\"a\" className=\"cursor-pointer card-drop\">\n                                                <i className=\"mdi mdi-dots-vertical\"></i>\n                                            </Dropdown.Toggle>\n                                            <Dropdown.Menu>\n                                                <Dropdown.Item>Action</Dropdown.Item>\n                                                <Dropdown.Item>Anothther Action</Dropdown.Item>\n                                                <Dropdown.Item>Something Else</Dropdown.Item>\n                                                <Dropdown.Item>Separated link</Dropdown.Item>\n                                            </Dropdown.Menu>\n                                        </Dropdown>\n\n                                        <h5 className=\"header-title mt-0 mb-3 text-primary\">Upcoming</h5>\n                                        {state.upcomingTasks.length === 0 && (\n                                            <p className=\"text-center text-muted pt-2 mb-0\">No Tasks</p>\n                                        )}\n\n                                        <ul className=\"sortable-list tasklist list-unstyled\" id=\"upcoming\">\n                                            {(state.upcomingTasks || []).map((item, index) => (\n                                                <Draggable key={item.id} draggableId={item.id + ''} index={index}>\n                                                    {(provided, snapshot) => (\n                                                        <li\n                                                            ref={provided.innerRef}\n                                                            {...provided.draggableProps}\n                                                            {...provided.dragHandleProps}\n                                                        >\n                                                            <TaskItem task={item} />\n                                                        </li>\n                                                    )}\n                                                </Draggable>\n                                            ))}\n                                            {provided.placeholder}\n                                        </ul>\n                                        <div className=\"text-center pt-2\">\n                                            <Link\n                                                to=\"#\"\n                                                className=\"btn btn-primary waves-effect waves-light\"\n                                                onClick={() => newTask('Pending', 'upcomingTasks')}\n                                            >\n                                                <i className=\"mdi mdi-plus\"></i> Add New\n                                            </Link>\n                                        </div>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        )}\n                    </Droppable>\n\n                    {/* in progress */}\n                    <Droppable droppableId=\"inprogressTasks\">\n                        {(provided, snapshot) => (\n                            <Col lg={4} ref={provided.innerRef}>\n                                <Card>\n                                    <Card.Body>\n                                        <Dropdown className=\"float-end\" align=\"end\">\n                                            <Dropdown.Toggle as=\"a\" className=\"cursor-pointer card-drop\">\n                                                <i className=\"mdi mdi-dots-vertical\"></i>\n                                            </Dropdown.Toggle>\n                                            <Dropdown.Menu>\n                                                <Dropdown.Item>Action</Dropdown.Item>\n                                                <Dropdown.Item>Anothther Action</Dropdown.Item>\n                                                <Dropdown.Item>Something Else</Dropdown.Item>\n                                                <Dropdown.Item>Separated link</Dropdown.Item>\n                                            </Dropdown.Menu>\n                                        </Dropdown>\n\n                                        <h5 className=\"header-title mt-0 mb-3 text-warning\">In Progress</h5>\n\n                                        {state.inprogressTasks.length === 0 && (\n                                            <p className=\"text-center text-muted pt-2 mb-0\">No Tasks</p>\n                                        )}\n\n                                        <ul className=\"sortable-list tasklist list-unstyled\" id=\"inprogress\">\n                                            {(state.inprogressTasks || []).map((item, index) => (\n                                                <Draggable key={item.id} draggableId={item.id + ''} index={index}>\n                                                    {(provided, snapshot) => (\n                                                        <li\n                                                            ref={provided.innerRef}\n                                                            {...provided.draggableProps}\n                                                            {...provided.dragHandleProps}\n                                                        >\n                                                            <TaskItem task={item} />\n                                                        </li>\n                                                    )}\n                                                </Draggable>\n                                            ))}\n                                            {provided.placeholder}\n                                        </ul>\n                                        <div className=\"text-center pt-2\">\n                                            <Link\n                                                to=\"#\"\n                                                className=\"btn btn-primary waves-effect waves-light\"\n                                                onClick={() => newTask('Inprogress', 'inprogressTasks')}\n                                            >\n                                                <i className=\"mdi mdi-plus\"></i> Add New\n                                            </Link>\n                                        </div>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        )}\n                    </Droppable>\n\n                    {/* done */}\n                    <Droppable droppableId=\"completedTasks\">\n                        {(provided, snapshot) => (\n                            <Col lg={4} ref={provided.innerRef}>\n                                <Card>\n                                    <Card.Body>\n                                        <Dropdown className=\"float-end\" align=\"end\">\n                                            <Dropdown.Toggle as=\"a\" className=\"cursor-pointer card-drop\">\n                                                <i className=\"mdi mdi-dots-vertical\"></i>\n                                            </Dropdown.Toggle>\n                                            <Dropdown.Menu>\n                                                <Dropdown.Item>Action</Dropdown.Item>\n                                                <Dropdown.Item>Anothther Action</Dropdown.Item>\n                                                <Dropdown.Item>Something Else</Dropdown.Item>\n                                                <Dropdown.Item>Separated link</Dropdown.Item>\n                                            </Dropdown.Menu>\n                                        </Dropdown>\n\n                                        <h5 className=\"header-title mt-0 mb-3 text-success\">Completed</h5>\n                                        {state.completedTasks.length === 0 && (\n                                            <p className=\"text-center text-muted pt-2 mb-0\">No Tasks</p>\n                                        )}\n\n                                        <ul className=\"sortable-list tasklist list-unstyled\" id=\"done\">\n                                            {(state.completedTasks || []).map((item, index) => (\n                                                <Draggable key={item.id} draggableId={item.id + ''} index={index}>\n                                                    {(provided, snapshot) => (\n                                                        <li\n                                                            ref={provided.innerRef}\n                                                            {...provided.draggableProps}\n                                                            {...provided.dragHandleProps}\n                                                        >\n                                                            <TaskItem task={item} />\n                                                        </li>\n                                                    )}\n                                                </Draggable>\n                                            ))}\n                                            {provided.placeholder}\n                                        </ul>\n                                        <div className=\"text-center pt-2\">\n                                            <Link\n                                                to=\"#\"\n                                                className=\"btn btn-primary waves-effect waves-light\"\n                                                onClick={() => newTask('Done', 'completedTasks')}\n                                            >\n                                                <i className=\"mdi mdi-plus\"></i> Add New\n                                            </Link>\n                                        </div>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        )}\n                    </Droppable>\n                    {/* </div> */}\n                </DragDropContext>\n            </Row>\n\n            {/* add new task modal */}\n            {newTaskDetails && (\n                <Modal show={newTaskModal} onHide={toggleNewTaskModal} centered>\n                    <Modal.Header closeButton>\n                        <h4 className=\"modal-title\">Add New Task</h4>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <form onSubmit={handleSubmit(handleNewTask)} className=\"px-2\">\n                            <FormInput\n                                name=\"title\"\n                                label=\"Title\"\n                                placeholder=\"Enter title\"\n                                type=\"text\"\n                                containerClass=\"mb-3\"\n                                className=\"form-control\"\n                                register={register}\n                                key=\"title\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <Row>\n                                <Col md={6}>\n                                    <FormInput\n                                        name=\"userName\"\n                                        label=\"Assign To\"\n                                        placeholder=\"Enter Name\"\n                                        type=\"text\"\n                                        containerClass=\"mb-3\"\n                                        className=\"form-control\"\n                                        register={register}\n                                        key=\"userName\"\n                                        errors={errors}\n                                        control={control}\n                                    />\n                                </Col>\n                                <Col md={6}>\n                                    <FormInput\n                                        name=\"priority\"\n                                        label=\"Priority\"\n                                        type=\"select\"\n                                        containerClass=\"mb-3\"\n                                        className=\"form-select\"\n                                        register={register}\n                                        key=\"priority\"\n                                        errors={errors}\n                                        control={control}\n                                    >\n                                        <option value=\"\">Select</option>\n                                        <option value=\"Urgent\">Urgent</option>\n                                        <option value=\"High\">High</option>\n                                    </FormInput>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col md={6}>\n                                    <FormInput\n                                        name=\"startDate\"\n                                        label=\"Start Date\"\n                                        placeholder=\"Enter Date\"\n                                        type=\"text\"\n                                        containerClass=\"mb-3\"\n                                        className=\"form-control\"\n                                        register={register}\n                                        key=\"startDate\"\n                                        errors={errors}\n                                        control={control}\n                                    />\n                                </Col>\n                                <Col md={6}>\n                                    <FormInput\n                                        name=\"DueDate\"\n                                        label=\"Due Date\"\n                                        placeholder=\"Enter Date\"\n                                        type=\"text\"\n                                        containerClass=\"mb-3\"\n                                        className=\"form-control\"\n                                        register={register}\n                                        key=\"DueDate\"\n                                        errors={errors}\n                                        control={control}\n                                    />\n                                </Col>\n                            </Row>\n\n                            <div className=\"text-start\">\n                                <Button variant=\"success\" type=\"submit\">\n                                    Save\n                                </Button>\n                                <Button variant=\"danger\" className=\"ms-1\" onClick={toggleNewTaskModal}>\n                                    Cancel\n                                </Button>\n                            </div>\n                        </form>\n                    </Modal.Body>\n                </Modal>\n            )}\n        </>\n    );\n};\n\nexport default Kanban;\n"],"names":["_ref","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","formState","errors","_jsx","className","noValidate","Array","isArray","map","child","props","name","React","type","key","PasswordInput","_errors$name","placeholder","refCallback","otherProps","showPassword","setShowPassword","useState","_jsxs","_Fragment","InputGroup","Form","Control","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","Feedback","TextualInput","_ref2","_errors$name2","endIcon","comp","rows","CheckInput","_ref3","_errors$name3","label","Check","SelectInput","_ref4","_errors$name4","Select","_ref5","labelClassName","containerClass","action","hasEndIcon","undefined","Group","Label","task","priority","Input","Link","to","title","OverlayTrigger","placement","overlay","Tooltip","userName","src","userAvatar","alt","comment","tasks","status","avatar1","avatar2","avatar3","avatar4","avatar5","avatar6","avatar7","avatar8","avatar9","avatar10","Kanban","usePageTitle","breadCrumbItems","path","active","state","setState","upcomingTasks","filter","t","inprogressTasks","completedTasks","totalTasks","setTotalTasks","length","newTaskModal","setNewTaskModal","newTaskDetails","setNewTaskDetails","schemaResolver","yupResolver","yup","shape","required","reset","toggleNewTaskModal","prevstate","newTask","queue","dueDate","Date","defaultAvatar","getList","modifiedState","Row","DragDropContext","onDragEnd","result","source","destination","droppableId","items","reorder","list","startIndex","endIndex","from","removed","splice","index","localState","move","droppableSource","droppableDestination","sourceClone","destClone","Droppable","provided","snapshot","Col","lg","innerRef","Card","Body","Dropdown","align","Toggle","Menu","Item","item","Draggable","draggableId","draggableProps","dragHandleProps","TaskItem","Modal","show","onHide","centered","Header","closeButton","values","formData","FormInput","md","value","Button","variant"],"sourceRoot":""}