{"version":3,"file":"static/js/3022.425dd7f9.chunk.js","mappings":"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","sources":["pages/uikit/Notifications/DefaultToasts.tsx","pages/uikit/Notifications/CustomToast.tsx","pages/uikit/Notifications/PlacementToast.tsx","pages/uikit/Notifications/DefaultAlerts.tsx","pages/uikit/Notifications/DismissibleAlerts.tsx","pages/uikit/Notifications/CustomBackgroundAlerts.tsx","pages/uikit/Notifications/CustomDismissibleAlerts.tsx","pages/uikit/Notifications/LiveAlert.tsx","pages/uikit/Notifications/index.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { Row, Col, Card, Toast } from 'react-bootstrap';\n\n// images\nimport logo from '../../../assets/images/logo-sm.png';\n\nconst DefaultToasts = () => {\n    const [show, setShow] = useState<boolean>(true);\n    const [showTranslucent, setShowTranslucent] = useState<boolean>(true);\n    const [showPlacement, setShowPlacement] = useState<boolean>(true);\n\n    const [stacked, setStacked] = useState([\n        {\n            time: 'just now',\n            desc: 'See? Just like this.',\n        },\n        {\n            time: '2 seconds ago',\n            desc: 'Heads up, toasts will stack automatically',\n        },\n    ]);\n\n    /*\n     * handle close\n     */\n    const handleClose = (index: number) => {\n        const list = [...stacked];\n        list.splice(index, 1);\n        setStacked(list);\n    };\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Bootstrap Toasts</h4>\n                <p className=\"text-muted font-14\">\n                    Push notifications to your visitors with a toast, a lightweight and easily customizable alert\n                    message.\n                </p>\n\n                <Row>\n                    <Col lg={6}>\n                        <h5 className=\"mb-2\">Basic</h5>\n                        <p className=\"text-muted font-14\">\n                            Toasts are as flexible as you need and have very little required markup. At a minimum, we\n                            require a single element to contain your “toasted” content and strongly encourage a dismiss\n                            button.\n                        </p>\n                        <div className=\"p-3\">\n                            <Toast onClose={() => setShow(false)} show={show} delay={5000} autohide>\n                                <Toast.Header>\n                                    <img src={logo} alt=\"brand-logo\" height=\"12\" className=\"me-1\" />\n                                    <strong className=\"me-auto\">Bulqbox</strong>\n                                    <small className=\"ms-5\">11 mins ago</small>\n                                </Toast.Header>\n                                <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n                            </Toast>\n                        </div>\n                    </Col>\n\n                    <Col lg={6}>\n                        <h5 className=\"mb-2\">Translucent</h5>\n                        <p className=\"text-muted font-14\">\n                            Toasts are slightly translucent, too, so they blend over whatever they might appear over.\n                            For browsers that support the backdrop-filter CSS property, we’ll also attempt to blur the\n                            elements under a toast.\n                        </p>\n\n                        <div className=\"p-3 bg-light\">\n                            <Toast\n                                onClose={() => setShowTranslucent(false)}\n                                show={showTranslucent}\n                                delay={8000}\n                                autohide\n                            >\n                                <Toast.Header>\n                                    <img src={logo} alt=\"brand-logo\" height=\"12\" className=\"me-1\" />\n                                    <strong className=\"me-auto\">Bulqbox</strong>\n                                    <small className=\"ms-5\">11 mins ago</small>\n                                </Toast.Header>\n                                <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n                            </Toast>\n                        </div>\n                    </Col>\n                </Row>\n\n                {/* stacked */}\n                <Row>\n                    <Col lg={6} className=\"mt-4\">\n                        <h5 className=\"mb-2\">Stacking</h5>\n                        <p className=\"text-muted font-14\">\n                            When you have multiple toasts, we default to vertiaclly stacking them in a readable manner.\n                        </p>\n                        <div className=\"p-3\">\n                            <div\n                                aria-live=\"polite\"\n                                aria-atomic=\"true\"\n                                style={{ position: 'relative', minHeight: '200px' }}\n                            >\n                                <div className=\"toast-container\" style={{ position: 'absolute', top: 0, right: 0 }}>\n                                    {(stacked || []).map((item, index) => {\n                                        return (\n                                            <Toast\n                                                key={index.toString()}\n                                                onClose={() => handleClose(index)}\n                                                delay={11000}\n                                                autohide\n                                            >\n                                                <Toast.Header>\n                                                    <img src={logo} alt=\"brand-logo\" height=\"12\" className=\"me-1\" />\n                                                    <strong className=\"me-auto\">Bulqbox</strong>\n                                                    <small className=\"ms-5\">{item.time}</small>\n                                                </Toast.Header>\n                                                <Toast.Body>{item.desc}</Toast.Body>\n                                            </Toast>\n                                        );\n                                    })}\n                                </div>\n                            </div>\n                        </div>\n                    </Col>\n\n                    <Col lg={6} className=\"mt-4\">\n                        <h5 className=\"mb-2\">Placement</h5>\n                        <p className=\"text-muted font-14\">\n                            Place toasts with custom CSS as you need them. The top right is often used for\n                            notifications, as is the top middle. If you’re only ever going to show one toast at a time,\n                            put the positioning styles right on the <code>.toast</code>.\n                        </p>\n\n                        <div className=\"p-3\">\n                            <div\n                                aria-live=\"polite\"\n                                aria-atomic=\"true\"\n                                className=\"d-flex justify-content-center align-items-center\"\n                                style={{ minHeight: '200px' }}\n                            >\n                                <Toast onClose={() => setShowPlacement(false)} show={showPlacement}>\n                                    <Toast.Header>\n                                        <img src={logo} alt=\"brand-logo\" height=\"12\" className=\"me-1\" />\n                                        <strong className=\"me-auto\">Bulqbox</strong>\n                                        <small className=\"ms-5\">1 mins ago</small>\n                                    </Toast.Header>\n                                    <Toast.Body>Heads up, toasts will stack automatically</Toast.Body>\n                                </Toast>\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default DefaultToasts;\n","import { useState } from 'react';\nimport { Card, Toast, Button } from 'react-bootstrap';\n\nconst CustomToast = () => {\n    const [showCustom1, setShowCustom1] = useState<boolean>(true);\n    const [showCustom2, setShowCustom2] = useState<boolean>(true);\n    const [showCustom3, setShowCustom3] = useState<boolean>(true);\n    const [showCustom4, setShowCustom4] = useState<boolean>(true);\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Custom content</h4>\n                <p className=\"text-muted\">\n                    Alternatively, you can also add additional controls and components to toasts.\n                </p>\n                <Toast\n                    className=\"d-flex align-items-center mt-4\"\n                    show={showCustom1}\n                    onClose={() => setShowCustom1(false)}\n                    delay={5000}\n                    autohide\n                >\n                    <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n                    <Button\n                        variant=\"\"\n                        onClick={() => setShowCustom1(false)}\n                        className=\"btn-close ms-auto me-2\"\n                    ></Button>\n                </Toast>\n                <Toast\n                    className=\"d-flex align-items-center text-white bg-primary border-0 mt-4\"\n                    show={showCustom2}\n                    onClose={() => setShowCustom2(false)}\n                    delay={8000}\n                    autohide\n                >\n                    <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n\n                    <Button\n                        variant=\"\"\n                        onClick={() => setShowCustom2(false)}\n                        className=\"btn-close btn-close-white ms-auto me-2\"\n                    ></Button>\n                </Toast>\n                <Toast className=\"mt-4\" show={showCustom3} onClose={() => setShowCustom3(false)} delay={10000} autohide>\n                    <Toast.Body>\n                        Hello, world! This is a toast message.\n                        <div className=\"mt-2 pt-2 border-top\">\n                            <Button className=\"btn-sm me-1\">Take action</Button>\n                            <Button variant=\"secondary\" onClick={() => setShowCustom3(false)} className=\"btn-sm\">\n                                Close\n                            </Button>\n                        </div>\n                    </Toast.Body>\n                </Toast>\n                <Toast\n                    className=\"text-white bg-primary mt-4\"\n                    show={showCustom4}\n                    onClose={() => setShowCustom4(false)}\n                    delay={12000}\n                    autohide\n                >\n                    <Toast.Body>\n                        Hello, world! This is a toast message.\n                        <div className=\"mt-2 pt-2 border-top\">\n                            <Button variant=\"light\" className=\"btn-sm me-1\">\n                                Take action\n                            </Button>\n                            <Button variant=\"secondary\" onClick={() => setShowCustom4(false)} className=\"btn-sm\">\n                                Close\n                            </Button>\n                        </div>\n                    </Toast.Body>\n                </Toast>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default CustomToast;\n","import { useState } from 'react';\nimport { Card, Toast, ToastContainer, Form } from 'react-bootstrap';\n\n// images\nimport logo from '../../../assets/images/logo-sm.png';\n\nconst PlacementToast = () => {\n    type ToastPositions =\n        | 'top-start'\n        | 'top-center'\n        | 'top-end'\n        | 'middle-start'\n        | 'middle-center'\n        | 'middle-end'\n        | 'bottom-start'\n        | 'bottom-center'\n        | 'bottom-end';\n\n    const [position, setPosition] = useState<ToastPositions>('top-start');\n\n    const positions = [\n        'top-start',\n        'top-center',\n        'top-end',\n        'middle-start',\n        'middle-center',\n        'middle-end',\n        'bottom-start',\n        'bottom-center',\n        'bottom-end',\n    ];\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Placement</h4>\n                <p className=\"text-muted font-14\">\n                    Place toasts with custom CSS as you need them. The top right is often used for notifications, as is\n                    the top middle. If you’re only ever going to show one toast at a time, put the positioning styles\n                    right on the\n                    <code>.toast</code>.\n                </p>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"selectToastPlacement\">Toast placement</label>\n                    <Form.Select\n                        id=\"selectToastPlacement\"\n                        className=\"mt-2\"\n                        onChange={(e: any) => setPosition(e.currentTarget.value)}\n                    >\n                        {(positions || []).map((p) => (\n                            <option key={p} value={p}>\n                                {p}\n                            </option>\n                        ))}\n                    </Form.Select>\n                </div>\n\n                <div\n                    aria-live=\"polite\"\n                    aria-atomic=\"true\"\n                    className=\"bg-light position-relative\"\n                    style={{ minHeight: '294px' }}\n                >\n                    <ToastContainer className=\"p-3\" position={position}>\n                        <Toast>\n                            <Toast.Header closeButton={false}>\n                                <img src={logo} className=\"me-1\" alt=\"\" height=\"12\" />\n                                <strong className=\"me-auto\">Bulqbox</strong>\n                                <small>11 mins ago</small>\n                            </Toast.Header>\n                            <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n                        </Toast>\n                    </ToastContainer>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default PlacementToast;\n","import { Card, Alert } from 'react-bootstrap';\n\nconst colors: string[] = ['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'];\n\nconst DefaultAlerts = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Default Alert</h4>\n                <p className=\"sub-header\">\n                    Alerts are available for any length of text, as well as an optional dismiss button. For proper\n                    styling, use one of the eight <code>variant</code>s.\n                </p>\n\n                {(colors || []).map((color, index) => {\n                    return (\n                        <Alert variant={color} key={index.toString()}>\n                            This is a <strong>{color}</strong> alert—check it out!\n                        </Alert>\n                    );\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default DefaultAlerts;\n","import { useState } from 'react';\nimport { Card, Alert } from 'react-bootstrap';\n\nconst DismissibleAlerts = () => {\n    const [colors, setColors] = useState<string[]>([\n        'primary',\n        'secondary',\n        'success',\n        'danger',\n        'warning',\n        'info',\n        'light',\n        'dark',\n    ]);\n\n    /*\n     * handle close\n     */\n    const handleClose = (index: number) => {\n        const list = [...colors];\n        list.splice(index, 1);\n        setColors(list);\n    };\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Dismissing Alerts</h4>\n                <p className=\"sub-header\">\n                    Add the <code>dismissible</code> prop to add a functioning dismiss button to the Alert.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Alert variant={color} key={index.toString()} onClose={() => handleClose(index)} dismissible>\n                            <strong>{color} - </strong> A simple {color} alert—check it out!\n                        </Alert>\n                    );\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default DismissibleAlerts;\n","import { Card, Alert } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nconst colors: string[] = ['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'];\n\nconst CustomBackgroundAlerts = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Custom Background Alert</h4>\n                <p className=\"sub-header\">\n                    Use <code>.bg-*</code>,<code>.border-0</code> classes.\n                </p>\n\n                {(colors || []).map((color, index) => {\n                    return (\n                        <Alert\n                            variant={color}\n                            key={index.toString()}\n                            className={classNames(\n                                'bg-' + color,\n                                'border-0',\n                                color === 'light' ? 'text-dark' : 'text-white',\n                                color === 'dark' ? 'text-light' : 'text-white'\n                            )}\n                        >\n                            This is a <strong>{color}</strong> alert—check it out!\n                        </Alert>\n                    );\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default CustomBackgroundAlerts;\n","import classNames from 'classnames';\nimport { useState } from 'react';\nimport { Card, Alert } from 'react-bootstrap';\n\nconst CustomDismissibleAlerts = () => {\n    const [colors, setColors] = useState<string[]>([\n        'primary',\n        'secondary',\n        'success',\n        'danger',\n        'warning',\n        'info',\n        'light',\n        'dark',\n    ]);\n\n    /*\n     * handle close\n     */\n    const handleClose = (index: number) => {\n        const list = [...colors];\n        list.splice(index, 1);\n        setColors(list);\n    };\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Dismissing Custom Background Alert</h4>\n                <p className=\"sub-header\">\n                    Use <code>.bg-*</code>,<code>.border-0</code> classes.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Alert\n                            variant={color}\n                            className={classNames(\n                                'bg-' + color,\n                                color === 'light' ? 'text-dark' : 'text-white',\n                                color === 'dark' ? 'text-light' : 'text-white'\n                            )}\n                            key={index.toString()}\n                            onClose={() => handleClose(index)}\n                            dismissible\n                        >\n                            <strong>{color} - </strong> A simple {color} alert—check it out!\n                        </Alert>\n                    );\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default CustomDismissibleAlerts;\n","import { useState } from 'react';\nimport { Card, Alert, Button } from 'react-bootstrap';\n\nconst LiveAlert = () => {\n    const [list, setList] = useState<number[]>([]);\n\n    /*\n     * handle close\n     */\n    const handleClose = (index: number) => {\n        const updatedList = [...list];\n        updatedList.splice(index, 1);\n        setList(updatedList);\n    };\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Alert Live example</h4>\n                <p className=\"sub-header\">\n                    Click the button below to show an alert (hidden with inline styles to start), then dismiss (and\n                    destroy) it with the built-in close button.\n                </p>\n\n                {(list || []).map((color, index) => {\n                    return (\n                        <Alert key={index.toString()} onClose={() => handleClose(index)} dismissible>\n                            Nice, you triggered this alert message!\n                        </Alert>\n                    );\n                })}\n                <Button onClick={() => setList((prev) => [...prev, prev.length])}>Show live alert</Button>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default LiveAlert;\n","import { Col, Row } from 'react-bootstrap';\n\n// hooks\nimport { usePageTitle } from '../../../hooks';\n\n// components\nimport DefaultToasts from './DefaultToasts';\nimport CustomToast from './CustomToast';\nimport PlacementToast from './PlacementToast';\nimport DefaultAlerts from './DefaultAlerts';\nimport DismissibleAlerts from './DismissibleAlerts';\nimport CustomBackgroundAlerts from './CustomBackgroundAlerts';\nimport CustomDismissibleAlerts from './CustomDismissibleAlerts';\nimport LiveAlert from './LiveAlert';\n\nconst Notifications = () => {\n    // set pagetitle\n    usePageTitle({\n        title: 'Notifications',\n        breadCrumbItems: [\n            {\n                path: '/base-ui/notifications',\n                label: 'Base UI',\n            },\n            {\n                path: '/base-ui/notifications',\n                label: 'Notifications',\n                active: true,\n            },\n        ],\n    });\n\n    return (\n        <>\n            <Row>\n                <Col xs={12}>\n                    <DefaultToasts />\n                </Col>\n            </Row>\n            <Row>\n                <Col lg={6}>\n                    <CustomToast />\n                </Col>\n\n                <Col lg={6}>\n                    <PlacementToast />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <DefaultAlerts />\n                </Col>\n                <Col lg={6}>\n                    <DismissibleAlerts />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <CustomBackgroundAlerts />\n                </Col>\n                <Col lg={6}>\n                    <CustomDismissibleAlerts />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <LiveAlert />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Notifications;\n"],"names":["DefaultToasts","show","setShow","useState","showTranslucent","setShowTranslucent","showPlacement","setShowPlacement","stacked","setStacked","time","desc","_jsx","Card","children","_jsxs","Body","className","Row","Col","lg","Toast","onClose","delay","autohide","Header","src","logo","alt","height","style","position","minHeight","top","right","map","item","index","list","splice","handleClose","toString","CustomToast","showCustom1","setShowCustom1","showCustom2","setShowCustom2","showCustom3","setShowCustom3","showCustom4","setShowCustom4","Button","variant","onClick","PlacementToast","setPosition","htmlFor","Form","Select","id","onChange","e","currentTarget","value","p","ToastContainer","closeButton","colors","DefaultAlerts","color","Alert","DismissibleAlerts","setColors","dismissible","CustomBackgroundAlerts","classNames","CustomDismissibleAlerts","LiveAlert","setList","updatedList","prev","length","Notifications","usePageTitle","title","breadCrumbItems","path","label","active","_Fragment","xs"],"sourceRoot":""}