{"version":3,"file":"static/js/3006.5db40877.chunk.js","mappings":"0NAiBA,MAAMA,GAAeC,EAAAA,EAAAA,KAAUC,IAC3B,MAAOC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAqB,KACxDC,EAAOC,IAAgBF,EAAAA,EAAAA,aACxB,KAAEG,GAASN,EAoFjB,OACIO,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,IAAKX,EAAOY,OAASC,GAhFTC,KACzB,IAAIC,EAAWD,EACXE,EAAOD,EAAS,GACpB,GAAIC,EAAM,CACN,MAAMC,EAAa,CACf,oEACA,4BAEEC,EAAkB,CAAC,QAAS,QAC5BC,EAAYH,EAAKI,KAAKC,MAAiD,GAAzCL,EAAKI,KAAKE,YAAY,KAAO,IAAO,IAAQC,cAC5EN,EAAWO,SAASR,EAAKS,OAASP,EAAgBM,SAAS,IAAIL,OAC/DJ,EAAW,IAAId,IACNyB,QAAQZ,GACjBZ,EAAiBa,GACjBV,EAAa,OAEbA,EAAa,mCAErB,CAaIL,EAAM2B,cAAc3B,EAAM2B,aAAaZ,EAAS,EAiDAa,CAAoBf,GAAeJ,SAC9EoB,IAAA,IAAC,aAAEC,EAAY,cAAEC,GAAeF,EAAA,OAC7BnB,EAAAA,EAAAA,KAAA,OAAKsB,UAAU,WAAUvB,UACrBF,EAAAA,EAAAA,MAAA,OAAKyB,UAAU,2BAA4BF,IAAcrB,SAAA,EACrDC,EAAAA,EAAAA,KAAA,YAAWqB,IACPE,OAAO,gBAEXvB,EAAAA,EAAAA,KAAA,KAAGsB,UAAU,0CACbtB,EAAAA,EAAAA,KAAA,MAAAD,SAAI,4CAMN,IAIbT,EAAMkC,cACH3B,EAAAA,EAAAA,MAAA,OAAKyB,UAAU,yBAAyBG,GAAG,wBAAuB1B,SAAA,EAC5DR,GAAiB,IAAImC,KAAI,CAACC,EAAGC,KAEvB5B,EAAAA,EAAAA,KAAC6B,EAAAA,EAAI,CAACP,UAAU,+BAA8BvB,UAC1CC,EAAAA,EAAAA,KAAA,OAAKsB,UAAU,MAAKvB,UAChBF,EAAAA,EAAAA,MAACiC,EAAAA,EAAG,CAACR,UAAU,qBAAoBvB,SAAA,CAC9B4B,EAAEI,UACC/B,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CAACV,UAAU,WAAUvB,UACrBC,EAAAA,EAAAA,KAAA,OACI,oBAAkB,GAClBsB,UAAU,6BACVW,IAAKN,EAAEjB,KACPwB,IAAKP,EAAEI,aAIjBJ,EAAEI,UACA/B,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CAACV,UAAU,WAAUvB,UACrBC,EAAAA,EAAAA,KAAA,OAAKsB,UAAU,YAAWvB,UACtBC,EAAAA,EAAAA,KAAA,QAAMsB,UAAU,kCAAiCvB,SAC5C4B,EAAEZ,KAAKoB,MAAM,KAAK,UAKnCtC,EAAAA,EAAAA,MAACmC,EAAAA,EAAG,CAACV,UAAU,OAAMvB,SAAA,EACjBC,EAAAA,EAAAA,KAACoC,EAAAA,GAAI,CAACC,GAAG,IAAIf,UAAU,qBAAoBvB,SACtC4B,EAAEjB,QAEPV,EAAAA,EAAAA,KAAA,KAAGsB,UAAU,OAAMvB,UACfC,EAAAA,EAAAA,KAAA,UAAAD,SAAS4B,EAAEW,sBAGnBtC,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CAACV,UAAU,WAAUvB,UACrBC,EAAAA,EAAAA,KAACoC,EAAAA,GAAI,CAACC,GAAG,IAAIf,UAAU,6CAA4CvB,UAC/DC,EAAAA,EAAAA,KAAA,KAAGsB,UAAU,kBAAkBiB,QAASA,KAAMC,OApFtEC,EAoFiFb,OA/EjGhC,EACK8C,KAAK,CACFC,MAAO,gBACPC,KAAM,8BACNC,KAAM,UACNC,kBAAkB,EAClBC,iBAAkB,cAClBC,kBAAmB,kBACnBC,mBAAoB,uBACpBC,kBAAmB,2BACnBC,gBAAgB,IAEnBC,MAAMC,IACH,GAAIA,EAAOC,YAAa,CACpB,MAAMC,EAAW,IAAIhE,GACrBgE,EAASC,OAAOf,EAAW,GAC3BjD,EAAiB+D,GACbjE,EAAM2B,cAAc3B,EAAM2B,aAAasC,EAE/C,KAxBQd,KAoFoF,cAhC5Bb,EAAI,WAwC/DlC,IAASM,EAAAA,EAAAA,KAAA,QAAMyD,MAAM,QAAO1D,SAAEL,SAKxC,IAIXN,EAAasE,aAAe,CACxBlC,aAAa,GAGjB,S,6HC5KA,MAyCA,EAzCmBmC,MAEfC,EAAAA,EAAAA,IAAa,CACTjB,MAAO,eACPkB,gBAAiB,CACb,CACIC,KAAM,gBACNC,MAAO,SAEX,CACID,KAAM,gBACNC,MAAO,eACPC,QAAQ,OAMhBhE,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAAA/B,UACAC,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CAAAjC,UACAC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAI,CAAA9B,UACDF,EAAAA,EAAAA,MAACgC,EAAAA,EAAKoC,KAAI,CAAAlE,SAAA,EACNC,EAAAA,EAAAA,KAAA,MAAIsB,UAAU,oBAAmBvB,SAAC,0BAElCC,EAAAA,EAAAA,KAAA,KAAGsB,UAAU,4BAA2BvB,SAAC,gHAKzCC,EAAAA,EAAAA,KAACZ,EAAAA,EAAY,CACT6B,aAAeb,IACX8D,QAAQC,IAAI,oBAAqB/D,EAAM,a","sources":["components/FileUploader.tsx","pages/forms/FileUpload.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport Dropzone from 'react-dropzone';\nimport { withSwal } from 'react-sweetalert2';\n\ntype FileType = File & {\n    preview?: string;\n    formattedSize?: string;\n};\n\ntype FileUploaderProps = {\n    onFileUpload?: (files: FileType[]) => void;\n    showPreview?: boolean;\n    swal: any;\n};\n\nconst FileUploader = withSwal((props: FileUploaderProps) => {\n    const [selectedFiles, setSelectedFiles] = useState<FileType[]>([]);\n    const [error, setTypeError] = useState<any>()\n    const { swal } = props;\n\n\n    /**\n     * Handled the accepted files and shows the preview\n     */\n    const handleAcceptedFiles = (files: FileType[]) => {\n        var allFiles = files;\n        var file = allFiles[0]\n        if (file) {\n            const validTypes = [\n                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n                'application/vnd.ms-excel',\n            ];\n            const validExtensions = ['.xlsx', '.xls'];\n            const extension = file.name.slice(((file.name.lastIndexOf(\".\") - 1) >>> 0) + 2).toLowerCase();\n            if (validTypes.includes(file.type) || validExtensions.includes(`.${extension}`)) {\n                allFiles = [...selectedFiles];\n                allFiles.push(...files);\n                setSelectedFiles(allFiles);\n                setTypeError(null);\n            } else {\n                setTypeError('Please select a valid Excel file');\n            }\n        }\n        // if (props.showPreview) {\n        //     (files || []).map((file) =>\n        //         Object.assign(file, {\n        //             preview: file['type'].split('/')[0] === 'image' ? URL.createObjectURL(file) : null,\n        //             formattedSize: formatBytes(file.size),\n        //         })\n        //     );\n        //     allFiles = [...selectedFiles];\n        //     allFiles.push(...files);\n        //     setSelectedFiles(allFiles);\n        // }\n\n        if (props.onFileUpload) props.onFileUpload(allFiles);\n    };\n\n    /**\n     * Formats the size\n     */\n    const formatBytes = (bytes: number, decimals: number = 2) => {\n        if (bytes === 0) return '0 Bytes';\n        const k = 1024;\n        const dm = decimals < 0 ? 0 : decimals;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n    };\n\n    /*\n     * Removes the selected file\n     */\n    const removeFile = (fileIndex: number) => {\n        // const newFiles = [...selectedFiles];\n        // newFiles.splice(fileIndex, 1);\n        // setSelectedFiles(newFiles);\n        // if (props.onFileUpload) props.onFileUpload(newFiles);\n        swal\n            .fire({\n                title: 'Are you sure?',\n                text: \"Do you want to delete this!\",\n                icon: 'warning',\n                showCancelButton: true,\n                cancelButtonText: 'No, cancel!',\n                confirmButtonText: 'Yes, delete it!',\n                confirmButtonClass: 'btn btn-success mt-2',\n                cancelButtonClass: 'btn btn-danger ms-2 mt-2',\n                buttonsStyling: false,\n            })\n            .then((result: any) => {\n                if (result.isConfirmed) {\n                    const newFiles = [...selectedFiles];\n                    newFiles.splice(fileIndex, 1);\n                    setSelectedFiles(newFiles);\n                    if (props.onFileUpload) props.onFileUpload(newFiles);\n                    // swal.fire('Deleted!', 'Your file has been deleted.', 'success');\n                }\n            });\n    };\n\n    return (\n        <>\n            <Dropzone {...props} onDrop={(acceptedFiles) => handleAcceptedFiles(acceptedFiles)}>\n                {({ getRootProps, getInputProps }) => (\n                    <div className=\"dropzone\">\n                        <div className=\"dz-message needsclick\" {...getRootProps()}>\n                            <input {...getInputProps()}\n                                accept=\".xls,.xlsx\" // Accept only Excel files\n                            />\n                            <i className=\"h3 text-muted dripicons-cloud-upload\"></i>\n                            <h4>Drop files here or click to upload.</h4>\n                            {/* <span className=\"text-muted font-13\">\n                                (This is just a demo dropzone. Selected files are <strong>not</strong> actually\n                                uploaded.)\n                            </span> */}\n                        </div>\n                    </div>\n                )}\n            </Dropzone>\n\n            {props.showPreview && (\n                <div className=\"dropzone-previews mt-3\" id=\"uploadPreviewTemplate\">\n                    {(selectedFiles || []).map((f, i) => {\n                        return (\n                            <Card className=\"mt-1 mb-0 shadow-none border\" key={i + '-file'}>\n                                <div className=\"p-2\">\n                                    <Row className=\"align-items-center\">\n                                        {f.preview && (\n                                            <Col className=\"col-auto\">\n                                                <img\n                                                    data-dz-thumbnail=\"\"\n                                                    className=\"avatar-sm rounded bg-light\"\n                                                    alt={f.name}\n                                                    src={f.preview}\n                                                />\n                                            </Col>\n                                        )}\n                                        {!f.preview && (\n                                            <Col className=\"col-auto\">\n                                                <div className=\"avatar-sm\">\n                                                    <span className=\"avatar-title bg-primary rounded\">\n                                                        {f.type.split('/')[0]}\n                                                    </span>\n                                                </div>\n                                            </Col>\n                                        )}\n                                        <Col className=\"ps-0\">\n                                            <Link to=\"#\" className=\"text-muted fw-bold\">\n                                                {f.name}\n                                            </Link>\n                                            <p className=\"mb-0\">\n                                                <strong>{f.formattedSize}</strong>\n                                            </p>\n                                        </Col>\n                                        <Col className=\"text-end\">\n                                            <Link to=\"#\" className=\"btn btn-link btn-lg text-muted shadow-none\">\n                                                <i className=\"dripicons-cross\" onClick={() => removeFile(i)}></i>\n                                            </Link>\n                                        </Col>\n                                    </Row>\n                                </div>\n                            </Card>\n                        );\n                    })}\n                    {error && <span color='error'>{error}</span>}\n                </div>\n            )}\n\n\n        </>\n    );\n});\n\nFileUploader.defaultProps = {\n    showPreview: true,\n};\n\nexport default FileUploader;\n","import React from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\n\n// hooks\nimport { usePageTitle } from '../../hooks';\n\n// components\nimport FileUploader from '../../components/FileUploader';\n\nconst FileUpload = () => {\n    // set pagetitle\n    usePageTitle({\n        title: 'File Uploads',\n        breadCrumbItems: [\n            {\n                path: '/forms/upload',\n                label: 'Forms',\n            },\n            {\n                path: '/forms/upload',\n                label: 'File Uploads',\n                active: true,\n            },\n        ],\n    });\n\n    return (\n        <Row>\n            <Col>\n                <Card>\n                    <Card.Body>\n                        <h4 className=\"header-title mb-3\">Dropzone File Upload</h4>\n\n                        <p className=\"text-muted font-13 m-b-30\">\n                            DropzoneJS is an open source library that provides drag’n’drop file uploads with image\n                            previews.\n                        </p>\n\n                        <FileUploader\n                            onFileUpload={(files:any) => {\n                                console.log('Uploaded files - ', files);\n                            }}\n                        />\n                    </Card.Body>\n                </Card>\n            </Col>\n        </Row>\n    );\n};\n\nexport default FileUpload;\n"],"names":["FileUploader","withSwal","props","selectedFiles","setSelectedFiles","useState","error","setTypeError","swal","_jsxs","_Fragment","children","_jsx","Dropzone","onDrop","acceptedFiles","files","allFiles","file","validTypes","validExtensions","extension","name","slice","lastIndexOf","toLowerCase","includes","type","push","onFileUpload","handleAcceptedFiles","_ref","getRootProps","getInputProps","className","accept","showPreview","id","map","f","i","Card","Row","preview","Col","alt","src","split","Link","to","formattedSize","onClick","removeFile","fileIndex","fire","title","text","icon","showCancelButton","cancelButtonText","confirmButtonText","confirmButtonClass","cancelButtonClass","buttonsStyling","then","result","isConfirmed","newFiles","splice","color","defaultProps","FileUpload","usePageTitle","breadCrumbItems","path","label","active","Body","console","log"],"sourceRoot":""}